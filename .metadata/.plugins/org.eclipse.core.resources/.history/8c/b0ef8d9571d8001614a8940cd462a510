#include "Wobbler.h"
#include <math.h>

#define __max(a,b) ((a)>(b)?(a):(b))
#define __min(a,b) ((a)<(b)?(a):(b))

#ifdef __cplusplus
extern "C"
{
#endif

	void Wobbler_Init(struct Wobbler_LFO *LFO)
	{
		LFO->Output = 0;
		LFO->OutputPhased = 0;
		LFO->Phase1 = 0;
		LFO->Gate[0] = 0;
		LFO->Gate[1] = 0;
		LFO->EnvelopeVal = 0;
		LFO->PhasedCountdown = 0;
		LFO->EnvelopeState = WOBBLER_IDLE;
	}

	void Wobbler_Trigger(struct Wobbler_LFO *LFO, unsigned char N, struct Wobbler_Params *Params)
	{
		if (N == 0)
		{
			LFO->Phase1 = 0;
			Wobbler_StartTwang(LFO);
		}
	}

	void Wobbler_LoadSettings(struct Wobbler_Settings *settings, struct Wobbler_Params *params)
	{

	}

	void Wobbler_ValidateParams(struct Wobbler_Params *params)
	{

	}

	unsigned long LFOelopeRange(int32_t V, int32_t SR)
	{
		return 1 + V*SR* 64.0f;
		//	return (unsigned long)(64 * pow((int32_t)((SR * 6) / 64.0), pow((int32_t)V, 0.54f)));
	}

	/// A sine approximation via a fourth-order cosine approx.
	/// @param x   angle (with 2^15 units/circle)
	/// @return     Sine value (Q12)
	int32_t isin_S4(int32_t x)
	{
		int c, x2, y;
		static const int qN = 13, qA = 12, B = 19900, C = 3516;

		c = x << (30 - qN);              // Semi-circle info into carry.
		x -= 1 << qN;                 // sine -> cosine calc

		x = x << (31 - qN);              // Mask with PI
		x = x >> (31 - qN);              // Note: SIGNED shift! (to qN)
		x = x*x >> (2 * qN - 14);          // x=x^2 To Q14

		y = B - (x*C >> 14);           // B - x^2*C
		y = (1 << qA) - (x*y >> 16);       // A - x^2*(B-x^2*C)

		return c >= 0 ? y : -y;
	}


	int32_t Sine(uint32_t phase)
	{
		int32_t P = phase >> 17;
		return isin_S4(P) << 17;

	}

	int32_t SawTooth(uint32_t phase)
	{
		return (*(int32_t*)&phase) >> 2;
	}

	int32_t Pulse(uint32_t phase)
	{
		if (phase & 0x80000000)
		{
			return INT32_MIN >> 2;
		}
		else
		{
			return INT32_MAX >> 2;
		}
	}

	int32_t Triangle(uint32_t phase)
	{
		if (phase & 0x80000000)
		{
			return (~(*(int32_t*)&(phase)) - 0x40000000) >> 1;
		}
		else
		{
			return ((*(int32_t*)&(phase)) - 0x40000000) >> 1;
		}
	}

	int32_t LERP(int32_t *V, int total, int fade)
	{
		int T = fade * total;
		unsigned char frac = T & 0xff;
		if (frac & frac < 255) frac += 1;
		int I = T >> 8;
		return ((V[I] >> 8) *(255 - frac) + (V[I + 1] >> 8) * frac);
	}

	int BasicShapes(uint32_t phase, int mod)
	{
		int32_t O[4];


		O[0] = Sine(phase);
		O[1] = SawTooth(phase);
		O[2] = Triangle(phase);
		O[3] = Pulse(phase);
		return LERP(O, 3, mod);



	}

	void Wobbler_StartTwang(struct Wobbler_LFO *LFO)
	{
		//LFO->EnvelopeVal = 0;
		LFO->EnvelopeState = WOBBLER_ATTACK;
	}


	int Twang(struct Wobbler_LFO *LFO, uint32_t phase)
	{
		return (Sine(phase) >> 16) * (LFO->EnvelopeVal >> 8);
	}

	int Wobbler_Get(struct Wobbler_LFO *LFO, struct Wobbler_Params *Params)
	{
		if (LFO->Gate[0] > 0)
		{
			LFO->Gate[0]--;
		}
		if (LFO->Gate[1] > 0) {
			LFO->Gate[1]--;
		}

		if (LFO->EnvelopeState != WOBBLER_IDLE)
		{
			uint32_t A = 0;
			uint32_t R = LFOelopeRange(128, 2000) >> 12;
			if (LFO->Mod < 128)
			{
				R = 1 + LFOelopeRange(LFO->Mod, 2000) >> 12;
			}
			else
			{
				A = 1 + LFOelopeRange(LFO->Mod - 128, 2000) >> 12;
			}
			if (LFO->EnvelopeState == WOBBLER_ATTACK)
			{
				if (A == 0)
				{
					LFO->EnvelopeState = WOBBLER_RELEASE;
					LFO->EnvelopeVal = 1 << 24;
				}
				else
				{
					LFO->EnvelopeVal += ((1 << 24) - 1) / A;
					if (LFO->EnvelopeVal >= 1 << 24)
					{
						LFO->EnvelopeVal = 1 << 24;
						LFO->EnvelopeState = WOBBLER_RELEASE;
					}
				}
			}
			else
			{
				LFO->EnvelopeVal -= ((1 << 24) - 1) / R;
				if (LFO->EnvelopeVal <= 0)
				{
					LFO->EnvelopeState = WOBBLER_IDLE;
					LFO->EnvelopeVal = 0;
				}
			}
		}
		uint32_t DP = LFOelopeRange(LFO->Speed, 2000);;
		LFO->Phase1 += DP;

		uint32_t DP2 = LFO->Phasing * 0x1000000;
		//DP2 <<= 24;
		LFO->Phase2 = LFO->Phase1 + DP2;

		for (int i = 0; i < 12; i++)
		{
			LFO->Led[i] = 0;
		}

		if (LFO->Phase1 < LFO->OldPhase1)
		{
			LFO->Gate[0] = WOBBLER_GATECOUNTDOWN;
			if (LFO->PhasedCountdown > 0)
			{
				LFO->Gate[1] = WOBBLER_GATECOUNTDOWN;
			}
			LFO->PhasedCountdown = LFO->Phasing << 24;
		}

		uint32_t last = LFO->PhasedCountdown;
		LFO->PhasedCountdown -= __min(DP, LFO->PhasedCountdown);
		if (LFO->PhasedCountdown == 0 && last != 0)
		{
			LFO->Gate[1] = WOBBLER_GATECOUNTDOWN;
		}

		LFO->OldPhase1 = LFO->Phase1;
		LFO->OldPhase2 = LFO->Phase2;

		int32_t O[4];
		int32_t P[4];


		O[0] = BasicShapes(LFO->Phase1, LFO->Mod);
		O[1] = Twang(LFO, LFO->Phase1);
		O[2] = 0;
		O[3] = -BasicShapes(LFO->Phase1, LFO->Mod);

		P[0] = BasicShapes(LFO->Phase2, LFO->Mod);
		P[1] = Twang(LFO, LFO->Phase2);
		P[2] = 0;
		P[3] = -BasicShapes(LFO->Phase2, LFO->Mod);



		LFO->Output = LERP(O, 3, LFO->Shape) / (0xffff * 4);
		LFO->OutputPhased = LERP(P, 3, LFO->Shape) / (0xffff * 4);

		LFO->Output += 2048;
		LFO->OutputPhased += 2048;

		if (LFO->Output > 4096) LFO->Output = 4096; else if (LFO->Output < 0) LFO->Output = 0;
		if (LFO->OutputPhased > 4096) LFO->OutputPhased = 4096; else if (LFO->OutputPhased < 0) LFO->OutputPhased = 0;
		//if (LFO->Output > 1) LFO->Output = 1; else if (LFO->Output < -1) LFO->Output = -1;

		int32_t LedIdxB = (LFO->Output * 11);
		int iLedIdxB = LedIdxB >> 12;
		int IdxB = ((LedIdxB - (iLedIdxB << 12))) >> 4;

		LFO->Led[(iLedIdxB + 12) % 12] = 255 - IdxB;
		LFO->Led[(iLedIdxB + 13) % 12] = IdxB;

		int32_t LedIdxA = (LFO->OutputPhased * 11);
		int iLedIdxA = LedIdxA >> 12;
		int IdxA = ((LedIdxA - (iLedIdxA << 12))) >> 4;

		LFO->Led[(iLedIdxA + 12) % 12] = __max(LFO->Led[(iLedIdxA + 12) % 12], 255 - IdxA);
		LFO->Led[(iLedIdxA + 13) % 12] = __max(LFO->Led[(iLedIdxA + 13) % 12], IdxA);


		return LFO->Output;
	}



#ifdef __cplusplus
}
#endif
