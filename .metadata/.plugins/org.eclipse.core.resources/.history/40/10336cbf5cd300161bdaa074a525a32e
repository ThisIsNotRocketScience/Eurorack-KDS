/* ###################################################################
 **     Filename    : main.c
 **     Project     : SonicScrewdriver
 **     Processor   : MKL02Z32VFM4
 **     Version     : Driver 01.01
 **     Compiler    : GNU C Compiler
 **     Date/Time   : 2015-12-04, 13:49, # CodeGen: 0
 **     Abstract    :
 **         Main module.
 **         This module contains user's application code.
 **     Settings    :
 **     Contents    :
 **         No public methods
 **
 ** ###################################################################*/
/*!
 ** @file main.c
 ** @version 01.01
 ** @brief
 **         Main module.
 **         This module contains user's application code.
 */
/*!
 **  @addtogroup main_module main module documentation
 **  @{
 */
/* MODULE main */

/* Including needed modules to compile this module/procedure */
#include "Cpu.h"
#include "Events.h"
#include "AD1.h"
#include "AdcLdd1.h"
#include "PTA.h"
#include "DACSEL.h"
#include "CLOCKINT.h"
#include "SW_ALGO.h"
#include "SW_SCALE.h"
#include "LATCH.h"
#include "DATA.h"
#include "CLOCK.h"
#include "SW_TPB.h"
#include "SW_BEATS.h"
#include "RESETINT.h"
#include "CI2C1.h"
#include "PTB.h"
#include "KSDK1.h"
#include "WAIT1.h"
#include "SM1.h"
#include "TI1.h"
#include "TimerIntLdd1.h"
#include "TU1.h"
/* Including shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
/* User includes (#include below this line is not maintained by Processor Expert) */

#include <math.h>
#include <stdio.h>
#include "main.h"

volatile int measured = 0;

int adcchannels[ADC_Count];



#include "Tuesday.h"
#include "DAC.h"

struct Tuesday_PatternGen Tuesday;
struct Tuesday_Settings Settings;
struct Tuesday_Params Params;
struct Tuesday_Params LastParams;
struct Tuesday_RandomGen MainRandom;

struct denoise_state_t
{
	int counter;
	int down;
	int pressed;
	int released;
	int lastcounter;
};

int denoise(int sw_down, struct denoise_state_t *state)
{
	if (sw_down)
		state->counter++;
	else
		state->counter--;
	state->pressed = 0;
	state->released = 0;

	if (state->counter < 2)
	{
		if (state->lastcounter == 2)
		{
			state->pressed = 1;
		}
		state->counter = 1;
		state->down = 1;
	}
	else if (state->counter > 30)
	{
		if (state->lastcounter == 30)
		{
			state->released = 1;
		}
		state->counter = 31;
		state->down = 0;
	}
	state->lastcounter = state->counter;
	return state->pressed;
}

uint32_t t = 0;

//4096 = 2.048v
/*2.5 * (2.048 * INP)/4096
		(x * 4096)
		/ 2.5 * 2.048
		 = inp*/

#define VOLT(x) ((int)((4096.0 * (x)) / (2.5 * 2.048)))
#define NOTE(x) VOLT((x) / 12.0)

int countdownTick = 1;
int countdownNote = 1;
int msecpertick = 10 ;

int clockup = 0;
int clockshad = 0;
int clockssincereset = 0;

long oldseed = -1;
byte pwm = 0;

int timesincelastclocktick;
int clocktick = 0;

void ShiftOut()
{
	pwm += 16;

	LATCH_ClrVal(LATCH_DeviceData);
	for (int i = 0; i < 6; i++)
	{
		if (gates[i] > 0)
			DATA_ClrVal(DATA_DeviceData);
		else
			DATA_SetVal(DATA_DeviceData);
		CLOCK_ClrVal(CLOCK_DeviceData);
		CLOCK_SetVal(CLOCK_DeviceData);
	}

	for (int i = 0; i < 16; i++)
	{
		if (leds[i] > pwm)
		{
			DATA_SetVal(DATA_DeviceData);
		}
		else
		{
			DATA_ClrVal(DATA_DeviceData);
		}
		CLOCK_ClrVal(CLOCK_DeviceData);
		CLOCK_SetVal(CLOCK_DeviceData);
	}

	LATCH_SetVal(LATCH_DeviceData);
}


void doTick()
{
	Tuesday_Tick(&Tuesday,&Params);
	ShiftOut();
}


int directtick = 0;

int extclockssincereset[6] = {0,0,0,0,0,0};
byte extclockssinceresetcounter[6] = {0,0,0,0,0,0};
int extclocksupsincereset =0;
int extclocksdowsincereset = 0;

void PatternReset()
{

	clearTick();
	TickOut = 0;
	Tick = -1;
	CoolDown = 0;
	countdownTick = 0;
	directtick = 1;
	clockssincereset = 0;
	for (int i = 0;i<6;i++)
	{
		extclockssincereset[i] = 0;
		extclockssinceresetcounter[i] = 0;
	}
	extclocksupsincereset =0;
	extclocksdowsincereset = 0;
}

int KnobOpt(int val)
{
	int r = 0;
	if (val > (65536*1)/5) r++;
	if (val > (65536*2)/5) r++;
	if (val > (65536*3)/5) r++;
	if (val > (65536*4)/5) r++;
	return 1 + 4 - r;
}

int lastclocksubdiv= -1;

void ExtClockTick(int state)
{
	clockup = state;


	int clocksubdiv = KnobOpt( adcchannels[ADC_TEMPO]);
	if (lastclocksubdiv != clocksubdiv)
	{
		clockssincereset = extclockssincereset[clocksubdiv];
	}
	lastclocksubdiv = clocksubdiv;
	if (state == 1 )
	{
		if ((extclocksupsincereset % clocksubdiv) == 0)
		{
			DoClock(1);
		}
		extclocksupsincereset = (extclocksupsincereset + 1)%clocksubdiv;
	}
	else
	{
		if ((extclocksdowsincereset % clocksubdiv) == 0)
		{
			DoClock(0);
		}
		extclocksdowsincereset  = (extclocksdowsincereset  + 1)%clocksubdiv;

	}

	if (state == 1)
	{
		for (int i = 1;i<6;i++)
		{

			extclockssinceresetcounter[i]++;
			if (extclockssinceresetcounter[i] == i)
			{
				extclockssinceresetcounter[i] = 0;
				extclockssincereset[i] = (extclockssincereset[i] + 1)%96;
			}
		}
		timesincelastclocktick = 0;
	}

}


void DoClock(int state)
{
	if (state == 1)
	{
		gates[GATE_CLOCK] = 1;


		if (clockssincereset >= 96)
		{
			clockssincereset = 0;
			Measure++;
			if (Measure * Tuesday.CurrentPattern.TPB * 4 >= Tuesday.CurrentPattern.Length) Measure =0 ;
		}


		//if (clockshad >= 96 / (Pattern.TPB * 4) || directtick == 1)
		int NewTick = (Measure * (Tuesday.CurrentPattern.TPB * 4)  + ((clockssincereset * (Tuesday.CurrentPattern.TPB * 4))/96)) % Tuesday.CurrentPattern.Length;
		if (NewTick != Tick || directtick == 1)
		{
			//#define USE_SEMIHOST
			//printf("%d %d\n", Measure, NewTick);
			if (Tick == -1) Tick = 0;

			doTick();
			Tick = NewTick;
			directtick = 0;
			clockshad = 0;
		}

		clockshad++;
		clockssincereset++;

	}
	else
	{
		clearTick();
		gates[GATE_CLOCK] = 0 ;
	}
}

int tickssincecommit = 0;

// half-millisecond timer -> update each dacchannel in turn
void doTimer()
{
	tickssincecommit++;
	timesincelastclocktick++;
	int clockmode = 1;
	if (clockup == 0 && timesincelastclocktick > 2000)
	{
		timesincelastclocktick = 3000;
		clockmode = 0;
	}

	t++;

	if (t % 2 == 0)
	{
		if (countdownNote >= 0)
		{
			countdownNote--;
			if (countdownNote <= 0)
			{
				TickOut = 0;
				gates[GATE_GATE] = 0;
			}
		}

		int bpm = 1 + (200 * (adcchannels[ADC_TEMPO])) / 65536;
		int msecperbeat = (1000 * 60) / (96 * (bpm/4));


		if (clockmode == 0)
		{
			countdownTick--;

			if (countdownTick > msecperbeat)
				countdownTick = msecperbeat;
			if (countdownTick <= 0 || directtick == 1)
			{
				DoClock(1);

				directtick = 0;
				countdownTick = msecperbeat;
				//				doTick();
			}
			else
			{
				DoClock(0);
				//				clearTick();
			}
		}
		if (CVOut > 4095)
		{
			CVOut = 4095;
		}
		if (CVOut < 0)
		{
			CVOut = 0;
		}
		DAC_Write(0, CVOut);
	}
	else
	{
		DAC_Write(1, TickOut);
	}

	ShiftOut();
}

void SetLedNumber(int offset, int number)
{
	switch (number % 13)
	{
	case 0:
		leds[offset + 0] = 255;
		leds[offset + 1] = 0;
		leds[offset + 2] = 0;
		leds[offset + 3] = 0;
		break;
	case 1:
		leds[offset + 0] = 0;
		leds[offset + 1] = 255;
		leds[offset + 2] = 0;
		leds[offset + 3] = 0;
		break;
	case 2:
		leds[offset + 0] = 0;
		leds[offset + 1] = 0;
		leds[offset + 2] = 255;
		leds[offset + 3] = 0;
		break;
	case 3:
		leds[offset + 0] = 0;
		leds[offset + 1] = 0;
		leds[offset + 2] = 0;
		leds[offset + 3] = 255;
		break;
	case 4:
		leds[offset + 0] = 255;
		leds[offset + 1] = 0;
		leds[offset + 2] = 0;
		leds[offset + 3] = 255;
		break;
	case 5:
		leds[offset + 0] = 255;
		leds[offset + 1] = 255;
		leds[offset + 2] = 0;
		leds[offset + 3] = 0;
		break;
	case 6:
		leds[offset + 0] = 0;
		leds[offset + 1] = 255;
		leds[offset + 2] = 255;
		leds[offset + 3] = 0;
		break;
	case 7:
		leds[offset + 0] = 0;
		leds[offset + 1] = 0;
		leds[offset + 2] = 255;
		leds[offset + 3] = 255;
		break;
	case 8:
		leds[offset + 0] = 255;
		leds[offset + 1] = 0;
		leds[offset + 2] = 255;
		leds[offset + 3] = 255;
		break;
	case 9:
		leds[offset + 0] = 255;
		leds[offset + 1] = 255;
		leds[offset + 2] = 0;
		leds[offset + 3] = 255;
		break;
	case 10:
		leds[offset + 0] = 255;
		leds[offset + 1] = 255;
		leds[offset + 2] = 255;
		leds[offset + 3] = 0;
		break;
	case 11:
		leds[offset + 0] = 0;
		leds[offset + 1] = 255;
		leds[offset + 2] = 255;
		leds[offset + 3] = 255;
		break;
	case 12:
		leds[offset + 0] = 255;
		leds[offset + 1] = 255;
		leds[offset + 2] = 255;
		leds[offset + 3] = 255;
		break;
	}
}
#define VERSIONBYTE 0x10
uint8_t hi(int address)
{
	return (uint8_t)((address) >> 8);
}

uint8_t lo(int address)
{
	return (uint8_t)((address & 0xFF));
}

uint8_t dev(int address)
{
#define address_24LC16B 0b1010

	return (uint8_t)((address_24LC16B << 3) | ((hi(address)) & 0x07));
}

volatile int i2csending = 0;
volatile int i2creceiving = 0;

byte combuffer[2];

void EE24_WriteByte(unsigned short address, byte value)
{
	//EE241_WriteByte(address, value);
	combuffer[0] = lo(address);
	combuffer[1] = value;
	i2csending = 0;

	byte devaddr = dev(address);
	int i = 0;

	CI2C1_SelectSlaveDevice(CI2C1_DeviceData, LDD_I2C_ADDRTYPE_7BITS, devaddr);
	CI2C1_MasterSendBlock(CI2C1_DeviceData, combuffer, 2, LDD_I2C_SEND_STOP);
	i2csending = 1;
	while (i2csending == 1)
	{
		CI2C1_MasterSendBlock(CI2C1_DeviceData, combuffer, 1, LDD_I2C_SEND_STOP);
		WAIT1_Waitms(10);
		ShiftOut();
	};

	i2csending = 0;
}

void EE24_WriteBlock(unsigned short address, byte *data, int len)
{
	//EE241_WriteBlock(address, data, len);

	for (int i = 0; i < len; i++)
	{

		EE24_WriteByte(address++, data[i]);
		//	WAIT1_Waitms(5);
	}
}

byte EE24_ReadByte(unsigned short address)
{
	//	byte out;
	//	EE241_ReadByte(address, &out);
	//return out;

	byte com[1] = {lo(address)};
	byte devaddr = dev(address);
	CI2C1_SelectSlaveDevice(CI2C1_DeviceData, LDD_I2C_ADDRTYPE_7BITS, devaddr);
	i2csending = 1;
	CI2C1_MasterSendBlock(CI2C1_DeviceData, com, 1, LDD_I2C_SEND_STOP);
	while (i2csending == 1)
	{
	}
	gates[2] = 0;
	ShiftOut();

	byte out;
	i2creceiving = 1;
	CI2C1_MasterReceiveBlock(CI2C1_DeviceData, &out, 1, LDD_I2C_SEND_STOP);
	while (i2creceiving == 1)
	{
	};
	gates[3] = 0;
	ShiftOut();

	return out;
}

void EE24_ReadBlock(unsigned short address, byte *out, int len)
{
	//EE241_ReadBlock(address, out, len);
	for (int i = 0; i < len; i++)
	{
		out[i] = EE24_ReadByte(address++);
	}

	/*
	byte com[1] = {lo(address)};
	byte devaddr = dev(address);
	CI2C1_Init(CI2C1_DeviceData);
	CI2C1_SelectSlaveDevice(CI2C1_DeviceData, LDD_I2C_ADDRTYPE_7BITS, devaddr);
	i2csending = 1;
	CI2C1_MasterSendBlock(CI2C1_DeviceData, com, 1, LDD_I2C_NO_SEND_STOP);
	while (i2csending == 1) {}


	i2creceiving = 1;
	CI2C1_MasterReceiveBlock(CI2C1_DeviceData,out, len, LDD_I2C_SEND_STOP);
	while (i2creceiving == 1) {};

	 */
}

void SaveEeprom()
{
	EE24_WriteByte(0, VERSIONBYTE);
	int paramsize = sizeof(Params);
	EE24_WriteBlock(1, (byte *)&Params, paramsize);
}

void LoadEeprom()
{
	byte Ver;
	Ver = EE24_ReadByte(0);
	if (Ver == VERSIONBYTE)
	{
		int paramsize = sizeof(Params);
		EE24_ReadBlock(1, (byte *)&Params, paramsize);

		PatternGen_ValidateParams(&Params);
	}
	else
	{
		SaveEeprom();
	}
}

void SetupLeds()
{
	SetLedNumber(8, Params.scale);
	SetLedNumber(12, Params.algo);
	SetLedNumber(4, Params.beatopt);
	SetLedNumber(0, Params.tpbopt);
}
/*lint -save  -e970 Disable MISRA rule (6.3) checking. */
int main(void)
/*lint -restore Enable MISRA rule (6.3) checking. */
{
	/* Write your local variable definition here */

	/*** Processor Expert internal initialization. DON'T REMOVE THIS CODE!!! ***/
	PE_low_level_init();
	/*** End of Processor Expert internal initialization.                    ***/

	/* Write your code here */

	static struct denoise_state_t algosw_state = {0};
	static struct denoise_state_t scalesw_state = {0};
	static struct denoise_state_t beatsw_state = {0};
	static struct denoise_state_t tpbsw_state = {0};

#ifdef USE_SEMIHOST
	initialise_monitor_handles();
#endif

	PatternGen_LoadSettings(&Settings, &Params);
	PatternGen_RandomSeed(&MainRandom, oldseed);
	LoadEeprom();

	TI1_Enable();
	AD1_Measure(FALSE);


	for(int j =0 ;j<16;j++)
	{
		for (int i =0 ;i<16;i++)
		{
			leds[15-i] = j==i?255:0;
		}
		ShiftOut();
		WAIT1_Waitms(40);
	}
	for (int i =0 ;i<16;i++)
	{
		leds[i] = 0;
	}
	ShiftOut();
	int switchmode = 1;
	SetupLeds();
	ShiftOut();

	byte commitchange = 0;
	for (;;)
	{

		int algosw = denoise(SW_ALGO_GetVal(0), &algosw_state);
		int scalesw = denoise(SW_SCALE_GetVal(0), &scalesw_state);
		int beatsw = denoise(SW_BEATS_GetVal(0), &beatsw_state);
		int tpbsw = denoise(SW_TPB_GetVal(0), &tpbsw_state);

		if (algosw == 1)
		{
			switchmode = 1;
			Params.algo = (Params.algo + 1) % TUESDAY_MAXALGO;
			commitchange = 1;
		}

		if (scalesw == 1)
		{
			switchmode = 1;
			Params.scale = (Params.scale + 1) % TUESDAY_MAXSCALE;
			commitchange = 1;
		}

		if (beatsw == 1)
		{
			switchmode = 1;
			Params.beatopt = (Params.beatopt + 1) % TUESDAY_MAXBEAT;

			commitchange = 1;
		}

		if (tpbsw == 1)
		{
			switchmode = 1;

			Settings.beatoptions[Params.beatopt];

			Params.tpbopt = (Params.tpbopt + 1) % TUESDAY_MAXTPB;
			commitchange = 1;
		}

		if (measured == 1)
		{
			measured = 0;
			AD1_Measure(FALSE);
		}

		// read the X/Y seed knobs
		long newseed = (adcchannels[0] >> 8) + ((adcchannels[1] >> 8) << 8);
		if (newseed != oldseed)
			switchmode = 1;

		if (switchmode == 1)
		{
			SetupLeds();
			// updated pattern needed for some reason!

			switchmode = 0;
			PatternGen_RandomSeed(&MainRandom, newseed);
			oldseed = newseed;

			Params.seed1 = (adcchannels[0] >> 8);
			Params.seed2 = (adcchannels[1] >> 8);

			Tuesday_Generate(&Tuesday.CurrentPattern, &Params, &Settings);
		}

		if (commitchange == 1 && tickssincecommit >= 10)
		{
			SaveEeprom();
			commitchange = 0;
			tickssincecommit = 0;
		}
	}
	/*** Don't write any code pass this line, or it will be deleted during code generation. ***/
  /*** RTOS startup code. Macro PEX_RTOS_START is defined by the RTOS component. DON'T MODIFY THIS CODE!!! ***/
  #ifdef PEX_RTOS_START
    PEX_RTOS_START();                  /* Startup of the selected RTOS. Macro is defined by the RTOS component. */
  #endif
  /*** End of RTOS startup code.  ***/
  /*** Processor Expert end of main routine. DON'T MODIFY THIS CODE!!! ***/
  for(;;){}
  /*** Processor Expert end of main routine. DON'T WRITE CODE BELOW!!! ***/
} /*** End of main routine. DO NOT MODIFY THIS TEXT!!! ***/

/* END main */
/*!
 ** @}
 */
/*
 ** ###################################################################
 **
 **     This file was created by Processor Expert 10.5 [05.21]
 **     for the Freescale Kinetis series of microcontrollers.
 **
 ** ###################################################################
 */
