=============================================================================
List of generated methods in project: k20synton

This text description is generated by Processor Expert. Do not modify it.
=============================================================================

Module "WAIT1"     (component Wait)
   - WAIT1_Wait10Cycles -Wait for 10 CPU cycles.
   - WAIT1_Wait100Cycles -Wait for 100 CPU cycles.
   - WAIT1_WaitCycles -Wait for a specified number of CPU cycles (16bit data type).
   - WAIT1_WaitLongCycles -Wait for a specified number of CPU cycles (32bit data type).
   - WAIT1_Waitms -Wait for a specified time in milliseconds.
   - WAIT1_Waitus -Wait for a specified time in microseconds.
   - WAIT1_Waitns -Wait for a specified time in nano seconds.
   - WAIT1_WaitOSms -If an RTOS is enabled, this routine will use a non-blocking wait method. Otherwise it will do a 
                busy/blocking wait.

Module "Bits1"     (component BitsIO_LDD)
   - Bits1_Init -This method initializes the associated peripheral(s) and the component internal variables. The method is 
                called automatically as a part of the application initialization code.
   - Bits1_GetVal -Returns the value of the Input/Output component. If the direction is [input] then reads the input value of 
                the pins and returns it. If the direction is [output] then returns the last written value (see <Safe mode> 
                property for limitations).
   - Bits1_PutVal -Specified value is passed to the Input/Output component. If the direction is [input] saves the value to a 
                memory or a register, this value will be written to the pins after switching to the output mode - using 
                [SetDir(TRUE)] (see <Safe mode> property for limitations). If the direction is [output] it writes the value to 
                the pins. (Method is available only if the Direction = _[output]_ or _[input/output]_).
   - Bits1_GetBit -Returns the value of the specified bit/pin of the Input/Output component. If the direction is [input] then 
                it reads the input value of the pin and returns it. If the direction is [output] then it returns the last 
                written value (see <Safe mode> property for limitations).
   - Bits1_PutBit -Specified value is passed to the specified bit/pin of the Input/Output component. If the direction is 
                [input] it saves the value to a memory or register, this value will be written to the pin after switching to 
                the output mode - using [SetDir(TRUE)] (see <Safe mode> property for limitations). If the direction is [output] 
                it writes the value to the pin. (Method is available only if the Direction = _[output]_ or _[input/output]_).
   - Bits1_SetBit -Sets (to one) the specified bit of the Input/Output component. It is the same as [PutBit(Bit, TRUE)]. 
                (Method is available only if the Direction = _[output]_ or _[input/output]_).
   - Bits1_ClrBit -Clears (sets to zero) the specified bit of the Input/Output component. It is the same as [PutBit(Bit, FALSE)
                ]. (Method is available only if the Direction = _[output]_ or _[input/output]_).

Module "FLASH1"    (component FLASH_LDD)
   - FLASH1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the "Enable in init. code" property is set to "yes" 
                (<Enabled in init. code>) value then the device is also enabled(see the description of the Enable() method). In 
                this case the Enable() method is not necessary and needn't to be generated. This method can be called only once.
                Before the second call of Init() the Deinit() must be called first.
   - FLASH1_Read -This method sets up a flash memory read operation. The operation itself is performing by defined batches 
                (property <Read batch size>) by periodical calling the component’s Main method in the user application (higher 
                level OS service).
   - FLASH1_Write -This method sets up a flash memory write operation. The operation itself is performing by defined batches 
                (property <Write batch size>) by periodical calling the component’s Main method in the user application (higher 
                level OS service) or by the component’s ISR, if an component’s interrupt service is enabled.
   - FLASH1_Erase -This method sets up a flash memory erase operation. The operation itself is performing by defined batches 
                (property <Erase batch size>) by periodical calling the component’s Main method in the user application (higher 
                level OS service) or by the component’s ISR, if an component’s interrupt service is enabled.
   - FLASH1_Main -This method is used to perform one batch of a flash memory operation. This method is used to perform batches 
                of all flash memory operations (Write, Read, Erase, EraseBlock, VerifyErasedBlock) when the component works in 
                the polled mode (interrupt service is disabled - property <Interrupt service>). This method performs batches of 
                the read flash memory operation, when the component works in the interrupt triggered mode (interrupt service is 
                enabled). This method is enabled only if the component works in the polled mode or if the Read method is 
                enabled.

Module "FRTOS1"    (component FreeRTOS)
   - FRTOS1_xTaskCreate -Create a new task and add it to the list of tasks that are ready to run.
   - FRTOS1_vTaskStartScheduler -Starts the real time kernel tick processing. After calling the kernel has control over which 
                tasks are executed and when.   The idle task is created automatically when vTaskStartScheduler() is called.   
                If vTaskStartScheduler() is successful the function will not return until an executing task calls 
                vTaskEndScheduler(). The function might fail and return immediately if there is insufficient RAM available for 
                the idle task to be created.
   - FRTOS1_vTaskSuspend -Suspend any task. When suspended a task will never get any microcontroller processing time, no matter 
                what its priority. Calls to vTaskSuspend are not accumulative - i.e. calling vTaskSuspend() twice on the same 
                task still only requires one call to vTaskResume() to ready the suspended task.
   - FRTOS1_vTaskSuspendAll -Suspends all real time kernel activity while keeping interrupts (including the kernel tick) 
                enabled.   After calling vTaskSuspendAll () the calling task will continue to execute without risk of being 
                swapped out until a call to xTaskResumeAll () has been made.   API functions that have the potential to cause a 
                context switch (for example, vTaskDelayUntil(), xQueueSend(), etc.) must not be called while the scheduler is 
                suspended.
   - FRTOS1_vTaskResume -Resumes a suspended task. A task that has been suspended by one of more calls to vTaskSuspend() will 
                be made available for running again by a single call to vTaskResume().
   - FRTOS1_xTaskResumeAll -Resumes real time kernel activity following a call to vTaskSuspendAll (). After a call to 
                xTaskSuspendAll () the kernel will take control of which task is executing at any time.
   - FRTOS1_xTaskResumeFromISR -An implementation of vTaskResume() that can be called from within an ISR. A task that has been 
                suspended by one of more calls to vTaskSuspend() will be made available for running again by a single call to 
                xTaskResumeFromISR().
   - FRTOS1_taskYIELD -Macro for forcing a context switch.
   - FRTOS1_taskENTER_CRITICAL -Macro to mark the start of a critical code region. Preemptive context switches cannot occur 
                when in a critical region.      NOTE: This may alter the stack (depending on the portable implementation) so 
                must be used with care!
   - FRTOS1_taskEXIT_CRITICAL -Macro to mark the end of a critical code region. Preemptive context switches cannot occur when 
                in a critical region.      NOTE: This may alter the stack (depending on the portable implementation) so must be 
                used with care!
   - FRTOS1_taskDISABLE_INTERRUPTS -Macro to disable all maskable interrupts.
   - FRTOS1_taskENABLE_INTERRUPTS -Macro to enable microcontroller interrupts.
   - FRTOS1_vTaskDelay -Delay a task for a given number of ticks. The actual time that the task remains blocked depends on the 
                tick rate. The constant portTICK_RATE_MS can be used to calculate real time from the tick rate - with the 
                resolution of one tick period.      vTaskDelay() specifies a time at which the task wishes to unblock relative 
                to the time at which vTaskDelay() is called. For example, specifying a block period of 100 ticks will cause the 
                task to unblock 100 ticks after vTaskDelay() is called. vTaskDelay() does not therefore provide a good method 
                of controlling the frequency of a cyclical task as the path taken through the code, as well as other task and 
                interrupt activity, will effect the frequency at which vTaskDelay() gets called and therefore the time at which 
                the task next executes. See vTaskDelayUntil() for an alternative API function designed to facilitate fixed 
                frequency execution. It does this by specifying an absolute time (rather than a relative time) at which the 
                calling task should unblock.
   - FRTOS1_vTaskDelayUntil -Delay a task until a specified time. This function can be used by cyclical tasks to ensure a 
                constant execution frequency.      This function differs from vTaskDelay() in one important aspect: 
                vTaskDelay() specifies a time at which the task wishes to unblock relative to the time at which vTaskDelay() is 
                called, whereas vTaskDelayUntil() specifies an absolute time at which the task wishes to unblock.      
                vTaskDelay() will cause a task to block for the specified number of ticks from the time vTaskDelay() is called. 
                It is therefore difficult to use vTaskDelay() by itself to generate a fixed execution frequency as the time 
                between a task unblocking following a call to vTaskDelay() and that task next calling vTaskDelay() may not be 
                fixed [the task may take a different path though the code between calls, or may get interrupted or preempted a 
                different number of times each time it executes].      Whereas vTaskDelay() specifies a wake time relative to 
                the time at which the function is called, vTaskDelayUntil() specifies the absolute (exact) time at which it 
                wishes to unblock.      It should be noted that vTaskDelayUntil() will return immediately (without blocking) if 
                it is used to specify a wake time that is already in the past. Therefore a task using vTaskDelayUntil() to 
                execute periodically will have to re-calculate its required wake time if the periodic execution is halted for 
                any reason (for example, the task is temporarily placed into the Suspended state) causing the task to miss one 
                or more periodic executions. This can be detected by checking the variable passed by reference as the 
                pxPreviousWakeTime parameter against the current tick count. This is however not necessary under most usage 
                scenarios.      The constant portTICK_RATE_MS can be used to calculate real time from the tick rate - with the 
                resolution of one tick period.      This function must not be called while the scheduler has been suspended by 
                a call to vTaskSuspendAll().
   - FRTOS1_uxTaskPriorityGet -Obtain the priority of any task.
   - FRTOS1_vTaskPrioritySet -Set the priority of any task.
   - FRTOS1_xTaskGetTickCount -Return the count of ticks since vTaskStartScheduler was called.
   - FRTOS1_xTaskGetTickCountFromISR -A version of xTaskGetTickCount() that can be called from an ISR.
   - FRTOS1_xSemaphoreCreateRecursiveMutex -Macro that implements a recursive mutex by using the existing queue mechanism.   
                Mutexes created using this macro can be accessed using the xSemaphoreTakeRecursive() and 
                xSemaphoreGiveRecursive() macros.  The  xSemaphoreTake() and xSemaphoreGive() macros should not be used.   A 
                mutex used recursively can be 'taken' repeatedly by the owner. The mutex doesn't become available again until 
                the owner has called xSemaphoreGiveRecursive() for each successful 'take' request.  For example, if a task 
                successfully 'takes' the same mutex 5 times then the mutex will not be available to any other task until it has 
                also  'given' the mutex back exactly five times.   This type of semaphore uses a priority inheritance mechanism 
                so a task 'taking' a semaphore MUST ALWAYS 'give' the semaphore back once the semaphore it is no longer 
                required. Mutex type semaphores cannot be used from within interrupt service routines.   See 
                vSemaphoreCreateBinary() for an alternative implementation that can be used for pure synchronisation (where one 
                task or interrupt always 'gives' the semaphore and another always 'takes' the semaphore) and from within 
                interrupt service routines.
   - FRTOS1_xSemaphoreTakeRecursive -Macro to recursively obtain, or 'take', a mutex type semaphore. The mutex must have 
                previously been created using a call to xSemaphoreCreateRecursiveMutex();   This macro must not be used on 
                mutexes created using xSemaphoreCreateMutex(). A mutex used recursively can be 'taken' repeatedly by the owner. 
                The mutex doesn't become available again until the owner has called xSemaphoreGiveRecursive() for each 
                successful 'take' request.  For example, if a task successfully 'takes' the same mutex 5 times then the mutex 
                will not be available to any other task until it has also  'given' the mutex back exactly five times.
   - FRTOS1_xSemaphoreGiveRecursive -Macro to recursively release, or 'give', a mutex type semaphore. The mutex must have 
                previously been created using a call to xSemaphoreCreateRecursiveMutex();   This macro must not be used on 
                mutexes created using xSemaphoreCreateMutex(). A mutex used recursively can be 'taken' repeatedly by the owner. 
                The mutex doesn't become available again until the owner has called xSemaphoreGiveRecursive() for each 
                successful 'take' request.  For example, if a task successfully 'takes' the same mutex 5 times then the mutex 
                will not be available to any other task until it has also  'given' the mutex back exactly five times.
   - FRTOS1_xSemaphoreCreateMutex -Macro that creates a mutex semaphore by using the existing queue mechanism.      Mutexes 
                created using this macro can be accessed using the xSemaphoreTake() and xSemaphoreGive() macros. The 
                xSemaphoreTakeRecursive() and xSemaphoreGiveRecursive() macros should not be used.      Mutexes and binary 
                semaphores are very similar but have some subtle differences: Mutexes include a priority inheritance mechanism, 
                binary semaphores do not. This makes binary semaphores the better choice for implementing synchronisation 
                (between tasks or between tasks and an interrupt), and mutexes the better choice for implementing simple mutual 
                exclusion.      The priority of a task that 'takes' a mutex can potentially be raised if another task of higher 
                priority attempts to obtain the same mutex. The task that owns the mutex 'inherits' the priority of the task 
                attempting to 'take' the same mutex. This means the mutex must always be 'given' back - otherwise the higher 
                priority task will never be able to obtain the mutex, and the lower priority task will never 'disinherit' the 
                priority. An example of a mutex being used to implement mutual exclusion is provided on the xSemaphoreTake() 
                documentation page.      A binary semaphore need not be given back once obtained, so task synchronisation can 
                be implemented by one task/interrupt continuously 'giving' the semaphore while another continuously 'takes' the 
                semaphore. This is demonstrated by the sample code on the xSemaphoreGiveFromISR() documentation page.      Both 
                mutex and binary semaphores are assigned to variables of type xSemaphoreHandle and can be used in any API 
                function that takes a parameter of this type.
   - FRTOS1_xSemaphoreTake -Macro to obtain a semaphore. The semaphore must have previously been created with a call to 
                vSemaphoreCreateBinary(), xSemaphoreCreateMutex() or xSemaphoreCreateCounting().      This macro must not be 
                called from an ISR. xQueueReceiveFromISR() can be used to take a semaphore from within an interrupt if required,
                although this would not be a normal operation. Semaphores use queues as their underlying mechanism, so 
                functions are to some extent interoperable.      xSemaphoreTake() is part of the fully featured intertask 
                communications API. xSemaphoreAltTake() is the alternative API equivalent. Both versions require the same 
                parameters and return the same values.
   - FRTOS1_xSemaphoreGive -Macro to release a semaphore. The semaphore must have previously been created with a call to 
                vSemaphoreCreateBinary(), xSemaphoreCreateMutex() or xSemaphoreCreateCounting(), and obtained using 
                sSemaphoreTake().      This must not be used from an ISR. See xSemaphoreGiveFromISR() for an alternative which 
                can be used from an ISR.      This macro must also not be used on semaphores created using 
                xSemaphoreCreateRecursiveMutex().      xSemaphoreGive() is part of the fully featured intertask communications 
                API. xSemaphoreAltGive() is the alternative API equivalent. Both versions require the same parameters and 
                return the same values.
   - FRTOS1_vSemaphoreCreateBinary -Macro that creates a semaphore by using the existing queue mechanism. The queue length is 1 
                as this is a binary semaphore. The data size is 0 as we don't want to actually store any data - we just want to 
                know if the queue is empty or full.      Binary semaphores and mutexes are very similar but have some subtle 
                differences: Mutexes include a priority inheritance mechanism, binary semaphores do not. This makes binary 
                semaphores the better choice for implementing synchronisation (between tasks or between tasks and an interrupt),
                and mutexes the better choice for implementing simple mutual exclusion.      A binary semaphore need not be 
                given back once obtained, so task synchronisation can be implemented by one task/interrupt continuously 
                'giving' the semaphore while another continuously 'takes' the semaphore. This is demonstrated by the sample 
                code on the xSemaphoreGiveFromISR() documentation page.      The priority of a task that 'takes' a mutex can 
                potentially be raised if another task of higher priority attempts to obtain the same mutex. The task that owns 
                the mutex 'inherits' the priority of the task attempting to 'take' the same mutex. This means the mutex must 
                always be 'given' back - otherwise the higher priority task will never be able to obtain the mutex, and the 
                lower priority task will never 'disinherit' the priority. An example of a mutex being used to implement mutual 
                exclusion is provided on the xSemaphoreTake() documentation page.      Both mutex and binary semaphores are 
                assigned to variables of type xSemaphoreHandle and can be used in any API function that takes a parameter of 
                this type.
   - FRTOS1_xSemaphoreCreateCounting -Macro that creates a counting semaphore by using the existing queue mechanism.      
                Counting semaphores are typically used for two things:      1. Counting events.   In this usage scenario an 
                event handler will 'give' a semaphore each time an event occurs (incrementing the semaphore count value), and a 
                handler task will 'take' a semaphore each time it processes an event (decrementing the semaphore count value). 
                The count value is therefore the difference between the number of events that have occurred and the number that 
                have been processed. In this case it is desirable for the initial count value to be zero.      2. Resource 
                management.   In this usage scenario the count value indicates the number of resources available. To obtain 
                control of a resource a task must first obtain a semaphore - decrementing the semaphore count value. When the 
                count value reaches zero there are no free resources. When a task finishes with the resource it 'gives' the 
                semaphore back - incrementing the semaphore count value. In this case it is desirable for the initial count 
                value to be equal to the maximum count value, indicating that all resources are free.
   - FRTOS1_xSemaphoreGiveFromISR -Macro to release a semaphore. The semaphore must have previously been created with a call to 
                vSemaphoreCreateBinary() or xSemaphoreCreateCounting().      Mutex type semaphores (those created using a call 
                to xSemaphoreCreateMutex()) must not be used with this macro.      This macro can be used from an ISR.
   - FRTOS1_xSemaphoreTakeFromISR -Macro to take a semaphore from an ISR. The semaphore must have previously been created with 
                a call to vSemaphoreCreateBinary() or xSemaphoreCreateCounting().      Mutex type semaphores (those created 
                using a call to xSemaphoreCreateMutex()) must not be used with this macro.      This macro can be used from an 
                ISR, however taking a semaphore from an ISR is not a common operation.  It is likely to only be useful when 
                taking a counting semaphore when an interrupt is obtaining an object from a resource pool (when the semaphore 
                count indicates the number of resources available).
   - FRTOS1_vSemaphoreDelete -Delete a semaphore.  This function must be used with care.  For example, do not delete a mutex 
                type semaphore if the mutex is held by a task.
   - FRTOS1_xSemaphoreGetMutexHolder -Returns the holder of a mutex or semaphore. If xMutex is indeed a mutex type semaphore, 
                return the current mutex holder. If xMutex is not a mutex type semaphore, or the mutex is available (not held 
                by a task), return NULL. Note: This Is is a good way of determining if the calling task is the mutex holder, 
                but not a good way of determining the identity of the mutex holder as the holder may change between the 
                function exiting and the returned value being tested.
   - FRTOS1_pvPortMalloc -Allocates a memory block using the port pvPortMalloc() function
   - FRTOS1_vPortFree -Frees a memory block previously allocated with pvPortMalloc()
   - FRTOS1_xPortGetFreeHeapSize -Returns the actual free size of the heap
   - FRTOS1_xTaskGetSchedulerState -Returns the state of the scheduler
   - FRTOS1_uxTaskGetStackHighWaterMark -The stack used by a task will grow and shrink as the task executes and interrupts are 
                processed. uxTaskGetStackHighWaterMark() returns the minimum amount of remaining stack space that was available 
                to the task since the task started executing - that is the amount of stack that remained unused when the task 
                stack was at its greatest (deepest) value. This is what is referred to as the stack 'high water mark'.
   - FRTOS1_uxTaskGetNumberOfTasks -Returns the number of tasks
   - FRTOS1_uxQueueMessagesWaiting -Queries the number of items that are currently held within a queue.
   - FRTOS1_uxQueueMessagesWaitingfromISR -A version of uxQueueMessagesWaiting() that can be used from inside an interrupt 
                service routine.
   - FRTOS1_xQueueCreate -Creates a queue.
   - FRTOS1_vQueueDelete -Deletes a queue that was previously created using a call to xQueueCreate(). vQueueDelete() can also 
                be used to delete a semaphore.
   - FRTOS1_xQueueReset -Reset a queue back to its original empty state.  pdPASS is returned if the queue is successfully reset.
                pdFAIL is returned if the queue could not be reset because there are tasks blocked on the queue waiting to 
                either receive from the queue or send to the queue.
   - FRTOS1_xQueueSendToBack -Sends an item to the back of a queue.
   - FRTOS1_xQueueSendToFront -Sends an item to the front of a queue.
   - FRTOS1_xQueueReceive -Receives an item from a queue.
   - FRTOS1_xQueueOverwrite -This is a macro that calls the xQueueGenericSend() function. A version of xQueueSendToBack() that 
                will write to the queue even if the queue is full, overwriting data that is already held in the queue. 
                xQueueOverwrite() is intended for use with queues that have a length of one, meaning the queue is either empty 
                or full. This function must not be called from an interrupt service routine (ISR). See xQueueOverwriteFromISR() 
                for an alternative which may be used in an ISR.
   - FRTOS1_xQueueOverwriteFromISR -This is a macro that calls the xQueueGenericSendFromISR() function. A version of 
                xQueueOverwrite() that can be used in an ISR. xQueueOverwriteFromISR() is similar to xQueueSendToBackFromISR(), 
                but will write to the queue even if the queue is full, overwriting data that is already held in the queue. 
                xQueueOverwriteFromISR() is intended for use with queues that have a length of one, meaning the queue is either 
                empty or full.
   - FRTOS1_xQueuePeek -Reads an item from a queue, but does not remove the item from the queue. Therefore the same item would 
                be returned the next time xQueueReceive() or xQueuePeek() was called on the same queue.
   - FRTOS1_xQueuePeekFromISR -A version of xQueuePeek() that can be used from an interrupt service routine (ISR). Reads an 
                item from a queue, but does not remove the item from the queue. Therefore the same item would be returned the 
                next time xQueueReceive() or xQueuePeek() was called on the same queue.
   - FRTOS1_xQueueSendToBackFromISR -Versions of xQueueSendToBack() API functions that can be called from an ISR. Unlike 
                xQueueSendToBack() these functions do not permit a block time to be specified.
   - FRTOS1_xQueueSendToFrontFromISR -Versions of xQueueSendToFront() API functions that can be called from an ISR. Unlike 
                xQueueSendToFront() these functions do not permit a block time to be specified.
   - FRTOS1_xQueueReceiveFromISR -A version of xQueueReceive() that can be called from an ISR. Unlike xQueueReceive(), 
                xQueueReceiveFromISR() does not permit a block time to be specified.
   - FRTOS1_vQueueAddToRegistry -Assigns a name to a queue and adds the queue to the registry.
   - FRTOS1_vQueueUnregisterQueue -Removes a queue from the queue registry.
   - FRTOS1_xQueueIsQueueFullFromISR -Queries a queue to determine if the queue is full. This function should only be used in 
                an ISR.
   - FRTOS1_xQueueIsQueueEmptyFromISR -Queries a queue to determine if the queue is empty. This function should only be used in 
                an ISR.
   - FRTOS1_xEventGroupCreate -Create a new RTOS event group. This function cannot be called from an interrupt.      Event 
                groups are stored in variables of type EventGroupHandle_t. The number of bits (or flags) implemented within an 
                event group is 8 if configUSE_16_BIT_TICKS is set to 1, or 24 if configUSE_16_BIT_TICKS is set to 0. The 
                dependency on configUSE_16_BIT_TICKS results from the data type used for thread local storage in the internal 
                implementation of RTOS tasks.
   - FRTOS1_xEventGroupWaitBits -Read bits within an RTOS event group, optionally entering the Blocked state (with a timeout) 
                to wait for a bit or group of bits to become set. This function cannot be called from an interrupt.
   - FRTOS1_xEventGroupSetBits -Set bits (flags) within an RTOS event group. This function cannot be called from an interrupt. 
                xEventGroupSetBitsFromISR() is a version that can be called from an interrupt.      Setting bits in an event 
                group will automatically unblock tasks that are blocked waiting for the bits.
   - FRTOS1_xEventGroupSetBitsFromISR -Set bits (flags) within an RTOS event group. A version of xEventGroupSetBits() that can 
                be called from an interrupt service routine (ISR).      Setting bits in an event group will automatically 
                unblock tasks that are blocked waiting for the bits.      Setting bits in an event group is not a deterministic 
                operation because there are an unknown number of tasks that may be waiting for the bit or bits being set. 
                FreeRTOS does not allow non-deterministic operations to be performed in interrupts or from critical sections. 
                Therefore xEventGroupSetBitFromISR() sends a message to the RTOS daemon task to have the set operation 
                performed in the context of the daemon task - where a scheduler lock is used in place of a critical section.    
                INCLUDE_xEventGroupSetBitFromISR, configUSE_TIMERS and INCLUDE_xTimerPendFunctionCall must all be set to 1 in 
                FreeRTOSConfig.h for the xEventGroupSetBitsFromISR() function to be available.
   - FRTOS1_xEventGroupClearBits -Clear bits (flags) within an RTOS event group. This function cannot be called from an 
                interrupt. See xEventGroupClearBitsFromISR() for a version that can be called from an interrupt.
   - FRTOS1_xEventGroupClearBitsFromISR -A version of xEventGroupClearBits() that can be called from an interrupt.
   - FRTOS1_xEventGroupGetBits -Returns the current value of the event bits (event flags) in an RTOS event group. This function 
                cannot be used from an interrupt. See xEventGroupsGetBitsFromISR() for a version that can be used in an 
                interrupt.
   - FRTOS1_xEventGroupGetBitsFromISR -A version of xEventGroupGetBits() that can be called from an interrupt.
   - FRTOS1_xEventGroupSync -Atomically set bits (flags) within an RTOS event group, then wait for a combination of bits to be 
                set within the same event group. This functionality is typically used to synchronise multiple tasks (often 
                called a task rendezvous), where each task has to wait for the other tasks to reach a synchronisation point 
                before proceeding.      This function cannot be used from an interrupt.      The function will return before 
                its block time expires if the bits specified by the uxBitsToWait parameter are set, or become set within that 
                time. In this case all the bits specified by uxBitsToWait will be automatically cleared before the function 
                returns.
   - FRTOS1_xTimerCreate -Creates a new software timer instance. This allocates the storage required by the new timer, 
                initialises the new timers internal state, and returns a handle by which the new timer can be referenced.
   - FRTOS1_xTimerIsTimerActive -Queries a timer to see if it is active or dormant.    A timer will be dormant if:          It 
                has been created but not started, or       It is an expired one-shot timer that has not been restarted.      
                Timers are created in the dormant state. The xTimerStart(), xTimerReset(), xTimerStartFromISR(), 
                xTimerResetFromISR(), xTimerChangePeriod() and xTimerChangePeriodFromISR() API functions can all be used to 
                transition a timer into the active state.
   - FRTOS1_xTimerStart -Timer functionality is provided by a timer service/daemon task. Many of the public FreeRTOS timer API 
                functions send commands to the timer service task through a queue called the timer command queue. The timer 
                command queue is private to the RTOS kernel itself and is not directly accessible to application code. The 
                length of the timer command queue is set by the configTIMER_QUEUE_LENGTH configuration constant.      
                xTimerStart() starts a timer that was previously created using the xTimerCreate() API function. If the timer 
                had already been started and was already in the active state, then xTimerStart() has equivalent functionality 
                to the xTimerReset() API function.      Starting a timer ensures the timer is in the active state. If the timer 
                is not stopped, deleted, or reset in the mean time, the callback function associated with the timer will get 
                called 'n 'ticks after xTimerStart() was called, where 'n' is the timers defined period.      It is valid to 
                call xTimerStart() before the RTOS scheduler has been started, but when this is done the timer will not 
                actually start until the RTOS scheduler is started, and the timers expiry time will be relative to when the 
                RTOS scheduler is started, not relative to when xTimerStart() was called.      The configUSE_TIMERS 
                configuration constant must be set to 1 for xTimerStart() to be available.
   - FRTOS1_xTimerStop -Timer functionality is provided by a timer service/daemon task. Many of the public FreeRTOS timer API 
                functions send commands to the timer service task through a queue called the timer command queue. The timer 
                command queue is private to the RTOS kernel itself and is not directly accessible to application code. The 
                length of the timer command queue is set by the configTIMER_QUEUE_LENGTH configuration constant.      
                xTimerStop() stops a timer that was previously started using either of the xTimerStart(), xTimerReset(), 
                xTimerStartFromISR(), xTimerResetFromISR(), xTimerChangePeriod() and xTimerChangePeriodFromISR() API functions. 
                Stopping a timer ensures the timer is not in the active state.      The configUSE_TIMERS configuration constant 
                must be set to 1 for xTimerStop() to be available.
   - FRTOS1_xTimerChangePeriod -Timer functionality is provided by a timer service/daemon task. Many of the public FreeRTOS 
                timer API functions send commands to the timer service task through a queue called the timer command queue. The 
                timer command queue is private to the RTOS kernel itself and is not directly accessible to application code. 
                The length of the timer command queue is set by the configTIMER_QUEUE_LENGTH configuration constant.      
                xTimerChangePeriod() changes the period of a timer that was previously created using the xTimerCreate() API 
                function.      xTimerChangePeriod() can be called to change the period of an active or dormant state timer.     
                The configUSE_TIMERS configuration constant must be set to 1 for xTimerChangePeriod() to be available.
   - FRTOS1_xTimerDelete -Timer functionality is provided by a timer service/daemon task. Many of the public FreeRTOS timer API 
                functions send commands to the timer service task through a queue called the timer command queue. The timer 
                command queue is private to the RTOS kernel itself and is not directly accessible to application code. The 
                length of the timer command queue is set by the configTIMER_QUEUE_LENGTH configuration constant.      
                xTimerDelete() deletes a timer that was previously created using the xTimerCreate() API function.      The 
                configUSE_TIMERS configuration constant must be set to 1 for xTimerDelete() to be available.
   - FRTOS1_xTimerReset -Timer functionality is provided by a timer service/daemon task. Many of the public FreeRTOS timer API 
                functions send commands to the timer service task through a queue called the timer command queue. The timer 
                command queue is private to the RTOS kernel itself and is not directly accessible to application code. The 
                length of the timer command queue is set by the configTIMER_QUEUE_LENGTH configuration constant.      
                xTimerReset() re-starts a timer that was previously created using the xTimerCreate() API function. If the timer 
                had already been started and was already in the active state, then xTimerReset() will cause the timer to 
                re-evaluate its expiry time so that it is relative to when xTimerReset() was called. If the timer was in the 
                dormant state then xTimerReset() has equivalent functionality to the xTimerStart() API function.      Resetting 
                a timer ensures the timer is in the active state. If the timer is not stopped, deleted, or reset in the mean 
                time, the callback function associated with the timer will get called 'n' ticks after xTimerReset() was called, 
                where 'n' is the timers defined period.      It is valid to call xTimerReset() before the RTOS scheduler has 
                been started, but when this is done the timer will not actually start until the RTOS scheduler is started, and 
                the timers expiry time will be relative to when the RTOS scheduler is started, not relative to when 
                xTimerReset() was called.      The configUSE_TIMERS configuration constant must be set to 1 for xTimerReset() 
                to be available.
   - FRTOS1_xTimerStartFromISR -A version of xTimerStart() that can be called from an interrupt service routine.
   - FRTOS1_xTimerStopFromISR -A version of xTimerStop() that can be called from an interrupt service routine.
   - FRTOS1_xTimerChangePeriodFromISR -A version of xTimerChangePeriod() that can be called from an interrupt service routine.
   - FRTOS1_xTimerResetFromISR -A version of xTimerReset() that can be called from an interrupt service routine.
   - FRTOS1_pvTimerGetTimerID -Returns the ID assigned to the timer.      IDs are assigned to timers using the pvTimerID 
                parameter of the call to xTimerCreate() that was used to create the timer.      If the same callback function 
                is assigned to multiple timers then the timer ID can be used within the callback function to identify which 
                timer actually expired.
   - FRTOS1_xTimerGetTimerDaemonTaskHandle -INCLUDE_xTimerGetTimerDaemonTaskHandle and configUSE_TIMERS must both be set to 1 
                in FreeRTOSConfig.h for xTimerGetTimerDaemonTaskHandle() to be available.
   - FRTOS1_pcTimerGetTimerName -
   - FRTOS1_xTimerPendFunctionCall -Used to pend the execution of a function to the RTOS daemon task (the timer service task, 
                hence this function is pre-fixed with 'Timer').      Functions that can be deferred to the RTOS daemon task 
                must have the following prototype:      void vPendableFunction( void * pvParameter1, uint32_t ulParameter2 );   
                The pvParameter1 and ulParameter2 are provided for use by the application code.      
                INCLUDE_xTimerPendFunctionCall() and configUSE_TIMERS must both be set to 1 for xTimerPendFunctionCall() to be 
                available.
   - FRTOS1_xTimerPendFunctionCallFromISR -Used from application interrupt service routines to defer the execution of a 
                function to the RTOS daemon task (the timer service task, hence this function is implemented in timers.c and is 
                prefixed with 'Timer').      Ideally an interrupt service routine (ISR) is kept as short as possible, but 
                sometimes an ISR either has a lot of processing to do, or needs to perform processing that is not deterministic.
                In these cases xTimerPendFunctionCallFromISR() can be used to defer processing of a function to the RTOS daemon 
                task.      A mechanism is provided that allows the interrupt to return directly to the task that will 
                subsequently execute the pended function. This allows the callback function to execute contiguously in time 
                with the interrupt - just as if the callback had executed in the interrupt itself.      Functions that can be 
                deferred to the RTOS daemon task must have the following prototype:      void vPendableFunction( void * 
                pvParameter1, uint32_t ulParameter2 );      The pvParameter1 and ulParameter2 are provided for use by the 
                application code.      INCLUDE_xTimerPendFunctionCall() and configUSE_TIMERS must both be set to 1 for 
                xTimerPendFunctionCallFromISR() to be available.
   - FRTOS1_Init -Low level initialization routine called from startup code. This method ensures that the tick timer is  not 
                enabled.

Module "UTIL1"     (component Utility)
   - UTIL1_strcpy -Same as normal strcpy, but safe as it does not write beyond the buffer.
   - UTIL1_strcat -Same as normal strcat, but safe as it does not write beyond the buffer.
   - UTIL1_chcat -Adds a single character to a zero byte terminated buffer. It cares about buffer overflow.
   - UTIL1_Num8sToStr -Converts a signed 8bit value into a string.
   - UTIL1_Num8uToStr -Converts an unsigned 8bit value into a string.
   - UTIL1_Num16sToStr -Converts a signed 16bit value into a string.
   - UTIL1_Num16uToStr -Converts a signed 16bit value into a string.
   - UTIL1_Num32uToStr -Converts an unsigned 32bit value into a string.
   - UTIL1_Num32sToStr -Converts a signed 32bit value into a string.
   - UTIL1_Num16sToStrFormatted -Converts a 16bit signed value to string.
   - UTIL1_Num16uToStrFormatted -Converts a 16bit unsigned value to string.
   - UTIL1_Num32uToStrFormatted -Converts a 32bit unsigned value to string.
   - UTIL1_Num32sToStrFormatted -Converts a 32bit signed value to string.
   - UTIL1_strcatNum8u -Appends a 8bit unsigned value to a string buffer.
   - UTIL1_strcatNum8s -Appends a 8bit signed value to a string buffer.
   - UTIL1_strcatNum16u -Appends a 16bit unsigned value to a string buffer.
   - UTIL1_strcatNum16s -Appends a 16bit signed value to a string buffer.
   - UTIL1_strcatNum32u -Appends a 32bit signed value to a string buffer.
   - UTIL1_strcatNum32s -Appends a 32bit signed value to a string buffer.
   - UTIL1_strcatNum16uFormatted -Appends a 16bit unsigned value to a string buffer in a formatted way.
   - UTIL1_strcatNum16sFormatted -Appends a 16bit signed value to a string buffer in a formatted way.
   - UTIL1_strcatNum32uFormatted -Appends a 32bit unsigned value to a string buffer in a formatted way.
   - UTIL1_strcatNum32sFormatted -Appends a 32bit signed value to a string buffer in a formatted way.
   - UTIL1_strcatNum8Hex -Appends a 8bit unsigned value to a buffer as hex number (without a 0x prefix).
   - UTIL1_strcatNum16Hex -Appends a 16bit unsigned value to a buffer as hex number (without a 0x prefix).
   - UTIL1_strcatNum24Hex -Appends a 32bit unsigned value to a buffer as hex number (without a 0x prefix). Only 24bits are used.
   - UTIL1_strcatNum32Hex -Appends a 16bit unsigned value to a buffer as hex number (without a 0x prefix).
   - UTIL1_strcatNum32sDotValue100 -Appends a 32bit signed value to a buffer. The value is in 1/100 units.  For example for the 
                value -13456 it will append the string "-134.56"
   - UTIL1_IsLeapYear -Returns true if a given year is a leap year
   - UTIL1_WeekDay -Returns the weekday for a given date >= 1.Jan.1900
   - UTIL1_ReadEscapedName -Scans an escaped name from a string. This is useful e.g. for double quoted file names.
   - UTIL1_xatoi -Custom atoi() (ascii to int) implementation by Elm Chan
   - UTIL1_ScanDate -Scans a date in the format "dd.mm.yyyy" or "dd-mm-yyyy". For yy it will expand it to 20yy.
   - UTIL1_ScanTime -Scans a time string in the format "hh:mm:ss,hh" with the part for the ",hh" is optional.
   - UTIL1_ScanDecimal8uNumber -Scans a decimal 8bit unsigned number
   - UTIL1_ScanDecimal8sNumber -Scans a decimal 8bit signed number
   - UTIL1_ScanDecimal16uNumber -Scans a decimal 16bit unsigned number
   - UTIL1_ScanDecimal16sNumber -Scans a decimal 16bit signed number
   - UTIL1_ScanDecimal32uNumber -Scans a decimal 32bit unsigned number
   - UTIL1_ScanDecimal32sNumber -Scans a decimal 32bit signed number
   - UTIL1_ScanHex8uNumber -Scans a hexadecimal 8bit number, starting with 0x
   - UTIL1_ScanHex8uNumberNoPrefix -Scans a hexadecimal 8bit number, without 0x
   - UTIL1_ScanHex16uNumber -Scans a hexadecimal 16bit number, starting with 0x
   - UTIL1_ScanHex32uNumber -Scans a hexadecimal 32bit number, starting with 0x
   - UTIL1_ScanSeparatedNumbers -Scans multiple numbers separated by character, e.g. "123.68.5.3"
   - UTIL1_ScanDoubleQuotedString -Scans a string inside double quotes and returns it without the double quotes.
   - UTIL1_strcmp -Wrapper to the standard strcmp() routine
   - UTIL1_strncmp -Wrapper to the standard strncmp() routine
   - UTIL1_strFind -Searches a substring inside a string and returns the position.
   - UTIL1_strtailcmp -Compares the tail of a string and returns 0 if it matches, 1 otherwise
   - UTIL1_strlen -Wrapper to the standard strlen() function.
   - UTIL1_strCutTail -Removes a tailing substring from a string. The string passed will be modified (the tail is cut by 
                writing a zero byte to the string!)

Module "Cpu"       (component MK20DN512LL10)

===================================================================================
