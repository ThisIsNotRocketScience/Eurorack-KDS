#include "BleppyOscs.h"
#include <math.h>
#include <stdlib.h>
#include "PowFast.hpp"

#define LERP(F,A,B) ((B-A)*F+A)
#define LERPINT(F,A,B, FBITS ) (((B-A)*F>>FBITS) + A)

#ifdef WIN32
#define MEMATTR 
#else
#define MEMATTR __attribute__((section(".data")))
#endif

float shift23 = (1 << 23);
float OOshift23 = 1.0 / (1 << 23);

float pow2(float i)
{
	float PowBodge = 0.33971f;
	float x;
	float y = i - floorf(i);
	y = (y - y*y)*PowBodge;

	x = i + 127 - y;
	x *= shift23; //pow(2,23);
	*(int*)&x = (int)x;
	return x;
}


const int32_t intblep[48 * 32 * 2] = {
	65535, -1,65534, -2,65532, -2,65530, -3,65527, -3,65524, -5,65519, -5,65514, -7,65507, -7,65500, -9,65491, -10,65481, -11,65470, -14,65456, -15,65441, -17,65424, -19,
	65405, -22,65383, -25,65358, -28,65330, -32,65298, -35,65263, -41,65222, -45,65177, -51,65126, -57,65069, -64,65005, -72,64933, -79,64854, -89,64765, -99,64666, -109,64557, -120,
	64437, -134,64303, -146,64157, -162,63995, -177,63818, -193,63625, -212,63413, -231,63182, -251,62931, -272,62659, -296,62363, -319,62044, -345,61699, -371,61328, -399,60929, -428,60501, -458,
	60043, -490,59553, -523,59030, -556,58474, -591,57883, -627,57256, -665,56591, -701,55890, -741,55149, -780,54369, -820,53549, -860,52689, -901,51788, -943,50845, -984,49861, -1025,48836, -1067,
	47769, -1108,46661, -1148,45513, -1189,44324, -1227,43097, -1267,41830, -1303,40527, -1340,39187, -1374,37813, -1407,36406, -1439,34967, -1468,33499, -1496,32003, -1520,30483, -1542,28941, -1563,27378, -1579,
	25799, -1594,24205, -1605,22600, -1612,20988, -1617,19371, -1618,17753, -1616,16137, -1610,14527, -1599,12928, -1587,11341, -1569,9772, -1548,8224, -1522,6702, -1495,5207, -1461,3746, -1425,2321, -1385,
	936, -1341,-405, -1294,-1699, -1244,-2943, -1190,-4133, -1133,-5266, -1073,-6339, -1011,-7350, -945,-8295, -878,-9173, -808,-9981, -737,-10718, -663,-11381, -590,-11971, -514,-12485, -437,-12922, -361,
	-13283, -285,-13568, -208,-13776, -132,-13908, -56,-13964, 17,-13947, 91,-13856, 161,-13695, 230,-13465, 296,-13169, 360,-12809, 422,-12387, 479,-11908, 533,-11375, 584,-10791, 630,-10161, 674,
	-9487, 711,-8776, 746,-8030, 775,-7255, 799,-6456, 819,-5637, 835,-4802, 844,-3958, 850,-3108, 850,-2258, 846,-1412, 837,-575, 821,246, 805,1051, 781,1832, 754,2586, 723,
	3309, 689,3998, 649,4647, 608,5255, 563,5818, 515,6333, 464,6797, 413,7210, 358,7568, 303,7871, 246,8117, 189,8306, 131,8437, 74,8511, 16,8527, -41,8486, -97,
	8389, -151,8238, -203,8035, -254,7781, -303,7478, -347,7131, -391,6740, -429,6311, -466,5845, -499,5346, -527,4819, -552,4267, -572,3695, -589,3106, -601,2505, -610,1895, -613,
	1282, -613,669, -607,62, -598,-536, -586,-1122, -569,-1691, -549,-2240, -524,-2764, -496,-3260, -466,-3726, -431,-4157, -396,-4553, -356,-4909, -315,-5224, -273,-5497, -229,-5726, -183,
	-5909, -138,-6047, -90,-6137, -44,-6181, 2,-6179, 48,-6131, 93,-6038, 137,-5901, 179,-5722, 219,-5503, 258,-5245, 294,-4951, 327,-4624, 358,-4266, 386,-3880, 409,-3471, 431,
	-3040, 449,-2591, 462,-2129, 472,-1657, 479,-1178, 483,-695, 481,-214, 476,262, 468,730, 458,1188, 442,1630, 424,2054, 403,2457, 379,2836, 351,3187, 323,3510, 291,
	3801, 258,4059, 223,4282, 187,4469, 149,4618, 110,4728, 72,4800, 34,4834, -6,4828, -44,4784, -81,4703, -118,4585, -153,4432, -187,4245, -219,4026, -248,3778, -276,
	3502, -301,3201, -323,2878, -342,2536, -360,2176, -373,1803, -383,1420, -390,1030, -395,635, -395,240, -392,-152, -387,-539, -379,-918, -367,-1285, -353,-1638, -335,-1973, -316,
	-2289, -293,-2582, -269,-2851, -243,-3094, -215,-3309, -185,-3494, -154,-3648, -123,-3771, -90,-3861, -57,-3918, -25,-3943, 9,-3934, 41,-3893, 73,-3820, 104,-3716, 134,-3582, 162,
	-3420, 189,-3231, 214,-3017, 237,-2780, 258,-2522, 277,-2245, 292,-1953, 306,-1647, 316,-1331, 324,-1007, 330,-677, 332,-345, 331,-14, 327,313, 322,635, 314,949, 302,
	1251, 289,1540, 273,1813, 255,2068, 234,2302, 213,2515, 189,2704, 164,2868, 139,3007, 111,3118, 83,3201, 56,3257, 27,3284, -2,3282, -29,3253, -57,3196, -84,
	3112, -110,3002, -134,2868, -158,2710, -180,2530, -200,2330, -218,2112, -234,1878, -248,1630, -260,1370, -269,1101, -276,825, -280,545, -283,262, -282,-20, -279,-299, -275,
	-574, -266,-840, -257,-1097, -246,-1343, -231,-1574, -215,-1789, -198,-1987, -179,-2166, -158,-2324, -136,-2460, -114,-2574, -91,-2665, -66,-2731, -42,-2773, -17,-2790, 7,-2783, 32,
	-2751, 55,-2696, 78,-2618, 101,-2517, 121,-2396, 142,-2254, 160,-2094, 176,-1918, 192,-1726, 206,-1520, 217,-1303, 226,-1077, 233,-844, 239,-605, 242,-363, 243,-120, 241,
	121, 238,359, 233,592, 226,818, 216,1034, 205,1239, 192,1431, 178,1609, 162,1771, 144,1915, 126,2041, 107,2148, 87,2235, 66,2301, 45,2346, 23,2369, 3,
	2372, -19,2353, -40,2313, -60,2253, -80,2173, -98,2075, -116,1959, -133,1826, -148,1678, -161,1517, -174,1343, -184,1159, -193,966, -200,766, -205,561, -209,352, -209,
	143, -209,-66, -206,-272, -203,-475, -196,-671, -189,-860, -180,-1040, -168,-1208, -157,-1365, -142,-1507, -128,-1635, -112,-1747, -96,-1843, -78,-1921, -60,-1981, -42,-2023, -24,
	-2047, -4,-2051, 13,-2038, 32,-2006, 50,-1956, 67,-1889, 83,-1806, 99,-1707, 113,-1594, 127,-1467, 138,-1329, 150,-1179, 158,-1021, 167,-854, 172,-682, 177,-505, 180,
	-325, 182,-143, 180,37, 179,216, 175,391, 170,561, 164,725, 155,880, 146,1026, 135,1161, 124,1285, 110,1395, 97,1492, 82,1574, 67,1641, 52,1693, 36,
	1729, 19,1748, 4,1752, -13,1739, -29,1710, -43,1667, -59,1608, -73,1535, -87,1448, -99,1349, -110,1239, -121,1118, -130,988, -138,850, -144,706, -150,556, -153,
	403, -156,247, -157,90, -155,-65, -155,-220, -151,-371, -146,-517, -140,-657, -133,-790, -125,-915, -115,-1030, -105,-1135, -93,-1228, -82,-1310, -69,-1379, -55,-1434, -42,
	-1476, -28,-1504, -14,-1518, 0,-1518, 14,-1504, 27,-1477, 41,-1436, 53,-1383, 66,-1317, 77,-1240, 87,-1153, 98,-1055, 106,-949, 113,-836, 121,-715, 126,-589, 129,
	-460, 133,-327, 135,-192, 135,-57, 133,76, 132,208, 129,337, 124,461, 119,580, 113,693, 104,797, 97,894, 87,981, 77,1058, 66,1124, 56,1180, 43,
	1223, 32,1255, 20,1275, 8,1283, -4,1279, -16,1263, -28,1235, -39,1196, -50,1146, -60,1086, -70,1016, -79,937, -87,850, -94,756, -100,656, -105,551, -110,
	441, -113,328, -115,213, -116,97, -115,-18, -114,-132, -113,-245, -109,-354, -105,-459, -100,-559, -94,-653, -87,-740, -80,-820, -71,-891, -62,-953, -53,-1006, -43,
	-1049, -33,-1082, -23,-1105, -12,-1117, -2,-1119, 8,-1111, 18,-1093, 29,-1064, 37,-1027, 47,-980, 56,-924, 63,-861, 71,-790, 77,-713, 83,-630, 88,-542, 92,
	-450, 95,-355, 98,-257, 98,-159, 99,-60, 98,38, 97,135, 95,230, 91,321, 87,408, 83,491, 77,568, 70,638, 64,702, 57,759, 48,807, 41,
	848, 32,880, 23,903, 14,917, 5,922, -3,919, -12,907, -21,886, -29,857, -37,820, -45,775, -51,724, -58,666, -64,602, -69,533, -74,459, -77,
	382, -81,301, -82,219, -84,135, -85,50, -83,-33, -84,-117, -82,-199, -79,-278, -76,-354, -72,-426, -68,-494, -62,-556, -57,-613, -51,-664, -44,-708, -38,
	-746, -30,-776, -23,-799, -15,-814, -8,-822, 0,-822, 7,-815, 15,-800, 22,-778, 28,-750, 35,-715, 42,-673, 46,-627, 53,-574, 56,-518, 61,-457, 64,
	-393, 66,-327, 69,-258, 71,-187, 71,-116, 71,-45, 69,24, 69,93, 68,161, 64,225, 62,287, 58,345, 54,399, 49,448, 44,492, 39,531, 33,
	564, 27,591, 20,611, 15,626, 8,634, 2,636, -5,631, -11,620, -17,603, -22,581, -29,552, -33,519, -38,481, -43,438, -47,391, -50,341, -53,
	288, -56,232, -58,174, -59,115, -59,56, -59,-3, -59,-62, -59,-121, -57,-178, -55,-233, -52,-285, -50,-335, -46,-381, -42,-423, -38,-461, -34,-495, -28,
	-523, -24,-547, -19,-566, -13,-579, -8,-587, -3,-590, 3,-587, 8,-579, 13,-566, 17,-549, 23,-526, 27,-499, 31,-468, 35,-433, 38,-395, 41,-354, 44,
	-310, 46,-264, 47,-217, 49,-168, 49,-119, 50,-69, 49,-20, 48,28, 47,75, 46,121, 44,165, 41,206, 38,244, 36,280, 32,312, 28,340, 24,
	364, 20,384, 16,400, 11,411, 7,418, 3,421, -2,419, -6,413, -10,403, -15,388, -18,370, -23,347, -25,322, -29,293, -31,262, -34,228, -37,
	191, -38,153, -39,114, -40,74, -41,33, -41,-8, -41,-49, -40,-89, -40,-129, -38,-167, -36,-203, -35,-238, -32,-270, -30,-300, -27,-327, -24,-351, -20,
	-371, -18,-389, -13,-402, -10,-412, -7,-419, -3,-422, 1,-421, 4,-417, 8,-409, 12,-397, 14,-383, 18,-365, 20,-345, 23,-322, 25,-297, 28,-269, 29,
	-240, 30,-210, 32,-178, 33,-145, 33,-112, 33,-79, 33,-46, 33,-13, 31,18, 31,49, 29,78, 28,106, 26,132, 24,156, 21,177, 19,196, 17,
	213, 13,226, 11,237, 8,245, 5,250, 2,252, -1,251, -4,247, -7,240, -9,231, -12,219, -15,204, -16,188, -19,169, -21,148, -23,125, -24,
	101, -25,76, -26,50, -26,24, -26,-2, -27,-29, -27,-56, -27,-83, -26,-109, -25,-134, -24,-158, -22,-180, -22,-202, -19,-221, -17,-238, -16,-254, -13,
	-267, -11,-278, -8,-286, -6,-292, -4,-296, -1,-297, 2,-295, 4,-291, 6,-285, 8,-277, 11,-266, 13,-253, 15,-238, 17,-221, 18,-203, 20,-183, 22,
	-161, 23,-138, 23,-115, 25,-90, 25,-65, 26,-39, 26,-13, 25,12, 26,38, 25,63, 26,89, 24,113, 24,137, 24,161, 22,183, 21,204, 20,
	224, 19,243, 18,261, 17,278, 15,293, 14,307, 13,320, 12,332, 10,342, 10,352, 8,360, 7,367, 7,374, 6,380, 5,385, 5,390, 4,
	394, 4,398, 3,401, 4,405, 3,408, 4,412, 4,416, 3,419, 5,424, 4,428, 5,433, 6,439, 6,445, 6,451, 7,458, 7,465, 7,
	472, 8,480, 9,489, 8,497, 8,505, 9,514, 8,522, 8,530, 8,538, 7,545, 6,551, 5,556, 5,561, 3,564, 2,566, 0,566, -1,
	565, -3,562, -5,557, -7,550, -10,540, -11,529, -14,515, -16,499, -19,480, -21,459, -23,436, -26,410, -29,381, -30,351, -33,318, -35,283, -38,
	245, -39,206, -41,165, -42,123, -44,79, -45,34, -44,-10, -47,-57, -47,-104, -47,-151, -46,-197, -46,-243, -46,-289, -44,-333, -43,-376, -41,-417, -40,
	-457, -37,-494, -35,-529, -32,-561, -28,-589, -26,-615, -23,-638, -18,-656, -15,-671, -11,-682, -7,-689, -3,-692, 1,-691, 5,-686, 9,-677, 14,-663, 17,
	-646, 22,-624, 25,-599, 29,-570, 33,-537, 35,-502, 39,-463, 42,-421, 44,-377, 46,-331, 48,-283, 49,-234, 51,-183, 52,-131, 52,-79, 52,-27, 51,
	24, 51,75, 50,125, 49,174, 47,221, 45,266, 43,309, 39,348, 37,385, 34,419, 30,449, 26,475, 22,497, 18,515, 14,529, 10,539, 5,
	544, 1,545, -4,541, -8,533, -12,521, -17,504, -20,484, -25,459, -28,431, -32,399, -35,364, -38,326, -40,286, -43,243, -45,198, -47,151, -48,
	103, -48,55, -50,5, -48,-43, -50,-93, -48,-141, -48,-189, -46,-235, -45,-280, -43,-323, -40,-363, -37,-400, -35,-435, -31,-466, -28,-494, -24,-518, -21,
	-539, -16,-555, -13,-568, -8,-576, -4,-580, 0,-580, 5,-575, 8,-567, 13,-554, 17,-537, 20,-517, 24,-493, 27,-466, 31,-435, 33,-402, 36,-366, 38,
	-328, 41,-287, 42,-245, 43,-202, 44,-158, 45,-113, 45,-68, 45,-23, 43,20, 44,64, 42,106, 41,147, 38,185, 37,222, 34,256, 32,288, 28,
	316, 25,341, 22,363, 18,381, 15,396, 11,407, 7,414, 3,417, -1,416, -4,412, -9,403, -12,391, -15,376, -19,357, -23,334, -25,309, -29,
	280, -31,249, -33,216, -35,181, -37,144, -38,106, -39,67, -41,26, -39,-13, -40,-53, -41,-94, -39,-133, -39,-172, -37,-209, -36,-245, -34,-279, -32,
	-311, -29,-340, -27,-367, -24,-391, -20,-411, -18,-429, -14,-443, -11,-454, -8,-462, -4,-466, 0,-466, 3,-463, 7,-456, 10,-446, 13,-433, 16,-417, 20,
	-397, 22,-375, 25,-350, 27,-323, 30,-293, 31,-262, 33,-229, 34,-195, 35,-160, 36,-124, 36,-88, 37,-51, 36,-15, 34,19, 35,54, 33,87, 32,
	119, 31,150, 28,178, 26,204, 24,228, 21,249, 19,268, 15,283, 13,296, 9,305, 6,311, 3,314, 0,314, -3,311, -7,304, -9,295, -13,
	282, -15,267, -18,249, -21,228, -23,205, -25,180, -27,153, -28,125, -30,95, -31,64, -32,32, -32,0, -32,-32, -32,-64, -33,-97, -31,-128, -31,
	-159, -30,-189, -28,-217, -26,-243, -25,-268, -23,-291, -20,-311, -18,-329, -15,-344, -13,-357, -10,-367, -7,-374, -4,-378, -1,-379, 2,-377, 4,-373, 7,
	-366, 11,-355, 12,-343, 16,-327, 17,-310, 20,-290, 22,-268, 23,-245, 25,-220, 27,-193, 27,-166, 28,-138, 29,-109, 29,-80, 30,-50, 29,-21, 27,
	6, 28,34, 27,61, 26,87, 24,111, 23,134, 20,154, 19,173, 17,190, 14,204, 12,216, 9,225, 7,232, 5,237, 1,238, -1,237, -4,
	233, -6,227, -8,219, -11,208, -14,194, -15,179, -18,161, -19,142, -21,121, -22,99, -24,75, -24,51, -25,26, -26,0, -25,-25, -26,-51, -27,
	-78, -25,-103, -25,-128, -24,-152, -23,-175, -22,-197, -20,-217, -19,-236, -16,-252, -15,-267, -13,-280, -11,-291, -8,-299, -6,-305, -4,-309, -1,-310, 1,
	-309, 4,-305, 5,-300, 8,-292, 10,-282, 12,-270, 14,-256, 16,-240, 18,-222, 18,-204, 21,-183, 21,-162, 22,-140, 22,-118, 24,-94, 23,-71, 23,
	-48, 24,-24, 22,-2, 21,19, 22,41, 20,61, 19,80, 18,98, 16,114, 15,129, 13,142, 11,153, 9,162, 7,169, 4,173, 3,176, 1,
	177, -2,175, -3,172, -6,166, -8,158, -9,149, -11,138, -13,125, -15,110, -15,95, -18,77, -18,59, -19,40, -20,20, -20,0, -19,-19, -21,
	-40, -21,-61, -20,-81, -20,-101, -20,-121, -18,-139, -18,-157, -16,-173, -16,-189, -13,-202, -13,-215, -10,-225, -9,-234, -8,-242, -5,-247, -3,-250, -2,
	-252, 0,-252, 2,-250, 4,-246, 6,-240, 8,-232, 9,-223, 11,-212, 12,-200, 13,-187, 15,-172, 16,-156, 16,-140, 17,-123, 18,-105, 18,-87, 19,
	-68, 18,-50, 18,-32, 18,-14, 17,3, 17,20, 16,36, 15,51, 14,65, 13,78, 11,89, 10,99, 9,108, 7,115, 5,120, 4,124, 2,
	126, 1,127, -1,126, -3,123, -5,118, -5,113, -8,105, -9,96, -10,86, -11,75, -13,62, -13,49, -14,35, -15,20, -16,4, -14,-10, -16,
	-26, -16,-42, -16,-58, -16,-74, -16,-90, -14,-104, -15,-119, -13,-132, -13,-145, -11,-156, -11,-167, -9,-176, -8,-184, -6,-190, -6,-196, -3,-199, -3,
	-202, 0,-202, 0,-202, 2,-200, 4,-196, 5,-191, 6,-185, 7,-178, 9,-169, 9,-160, 11,-149, 12,-137, 12,-125, 13,-112, 13,-99, 14,-85, 14,
	-71, 14,-57, 14,-43, 13,-30, 14,-16, 13,-3, 12,9, 11,20, 11,31, 11,42, 9,51, 8,59, 7,66, 6,72, 5,77, 4,81, 2,
	83, 1,84, -1,83, -1,82, -3,79, -4,75, -5,70, -7,63, -7,56, -8,48, -9,39, -10,29, -10,19, -11,8, -11,-3, -12,-15, -12,
	-27, -12,-39, -12,-51, -12,-63, -11,-74, -12,-86, -11,-97, -10,-107, -9,-116, -9,-125, -8,-133, -8,-141, -6,-147, -5,-152, -4,-156, -3,-159, -2,
	-161, -1,-162, 0,-162, 1,-161, 3,-158, 3,-155, 4,-151, 6,-145, 6,-139, 7,-132, 8,-124, 8,-116, 9,-107, 9,-98, 10,-88, 10,-78, 11,
	-67, 10,-57, 10,-47, 10,-37, 10,-27, 10,-17, 9,-8, 8,0, 8,8, 8,16, 7,23, 6,29, 5,34, 5,39, 3,42, 3,45, 2,
	47, 0,47, 0,47, -1,46, -2,44, -3,41, -4,37, -4,33, -6,27, -5,22, -7,15, -7,8, -8,0, -7,-7, -8,-15, -9,-24, -8,
	-32, -9,-41, -9,-50, -8,-58, -9,-67, -8,-75, -8,-83, -7,-90, -7,-97, -6,-103, -6,-109, -5,-114, -5,-119, -3,-122, -3,-125, -2,-127, -2,
	-129, 0,-129, 0,-129, 1,-128, 2,-126, 3,-123, 3,-120, 4,-116, 4,-112, 5,-107, 6,-101, 6,-95, 6,-89, 7,-82, 7,-75, 7,-68, 8,
	-60, 7,-53, 8,-45, 7,-38, 7,-31, 7,-24, 6,-18, 6,-12, 6,-6, 5,-1, 4,3, 4,7, 4,11, 3,14, 2,16, 2,18, 1,
	19, 0,19, 0,19, -1,18, -2,16, -2,14, -2,12, -4,8, -4,4, -4,0, -3,-3, -6,-9, -5,-14, -6,-20, -5,-25, -6,-31, -6,
	-37, -6,-43, -6,-49, -6,-55, -6,-61, -6,-67, -5,-72, -5,-77, -5,-82, -4,-86, -4,-90, -3,-93, -3,-96, -2,-98, -2,-100, -1,-101, -1,
	-102, 0,-102, 0,-102, 1,-101, 2,-99, 2,-97, 2,-95, 3,-92, 4,-88, 3,-85, 4,-81, 5,-76, 4,-72, 5,-67, 5,-62, 5,-57, 5,
	-52, 5,-47, 5,-42, 5,-37, 4,-33, 5,-28, 5,-23, 4,-19, 3,-16, 4,-12, 3,-9, 3,-6, 2,-4, 2,-2, 1,-1, 1,0, 0,
};


const float blep[48 * 32 * 2] = {
	0.999990f, -0.000013f,0.999977f, -0.000024f,0.999952f, -0.000034f,0.999918f, -0.000045f,0.999874f, -0.000057f,0.999817f, -0.000069f,0.999749f, -0.000083f,0.999665f, -0.000097f,0.999568f, -0.000114f,0.999453f, -0.000132f,0.999321f, -0.000153f,0.999169f, -0.000175f,0.998994f, -0.000200f,0.998793f, -0.000228f,0.998565f, -0.000260f,0.998305f, -0.000295f,
	0.998010f, -0.000335f,0.997675f, -0.000379f,0.997296f, -0.000429f,0.996867f, -0.000485f,0.996382f, -0.000547f,0.995835f, -0.000616f,0.995220f, -0.000693f,0.994527f, -0.000778f,0.993749f, -0.000872f,0.992877f, -0.000976f,0.991901f, -0.001090f,0.990810f, -0.001216f,0.989595f, -0.001353f,0.988242f, -0.001502f,0.986740f, -0.001665f,0.985075f, -0.001842f,
	0.983233f, -0.002033f,0.981200f, -0.002239f,0.978961f, -0.002462f,0.976499f, -0.002700f,0.973799f, -0.002957f,0.970842f, -0.003230f,0.967612f, -0.003521f,0.964091f, -0.003831f,0.960261f, -0.004159f,0.956101f, -0.004506f,0.951595f, -0.004873f,0.946723f, -0.005259f,0.941464f, -0.005663f,0.935801f, -0.006088f,0.929713f, -0.006532f,0.923181f, -0.006993f,
	0.916187f, -0.007475f,0.908713f, -0.007973f,0.900740f, -0.008489f,0.892251f, -0.009022f,0.883229f, -0.009570f,0.873658f, -0.010134f,0.863525f, -0.010710f,0.852815f, -0.011300f,0.841516f, -0.011901f,0.829615f, -0.012510f,0.817105f, -0.013128f,0.803976f, -0.013753f,0.790223f, -0.014382f,0.775841f, -0.015014f,0.760827f, -0.015646f,0.745181f, -0.016277f,
	0.728905f, -0.016902f,0.712002f, -0.017523f,0.694479f, -0.018134f,0.676345f, -0.018734f,0.657611f, -0.019321f,0.638290f, -0.019891f,0.618400f, -0.020441f,0.597958f, -0.020971f,0.576987f, -0.021475f,0.555512f, -0.021953f,0.533558f, -0.022401f,0.511158f, -0.022816f,0.488342f, -0.023196f,0.465145f, -0.023539f,0.441606f, -0.023842f,0.417764f, -0.024101f,
	0.393663f, -0.024317f,0.369346f, -0.024486f,0.344861f, -0.024605f,0.320256f, -0.024674f,0.295582f, -0.024691f,0.270891f, -0.024653f,0.246238f, -0.024560f,0.221678f, -0.024412f,0.197266f, -0.024205f,0.173061f, -0.023941f,0.149121f, -0.023618f,0.125503f, -0.023237f,0.102266f, -0.022798f,0.079468f, -0.022301f,0.057167f, -0.021747f,0.035420f, -0.021136f,
	0.014284f, -0.020470f,-0.006186f, -0.019750f,-0.025936f, -0.018979f,-0.044914f, -0.018157f,-0.063072f, -0.017289f,-0.080360f, -0.016375f,-0.096735f, -0.015419f,-0.112155f, -0.014424f,-0.126579f, -0.013394f,-0.139974f, -0.012332f,-0.152305f, -0.011242f,-0.163547f, -0.010127f,-0.173674f, -0.008992f,-0.182665f, -0.007841f,-0.190506f, -0.006680f,-0.197186f, -0.005511f,
	-0.202696f, -0.004341f,-0.207037f, -0.003172f,-0.210209f, -0.002011f,-0.212220f, -0.000864f,-0.213084f, 0.000268f,-0.212816f, 0.001376f,-0.211440f, 0.002458f,-0.208982f, 0.003509f,-0.205473f, 0.004524f,-0.200949f, 0.005498f,-0.195451f, 0.006428f,-0.189023f, 0.007309f,-0.181715f, 0.008137f,-0.173578f, 0.008910f,-0.164668f, 0.009623f,-0.155045f, 0.010273f,
	-0.144772f, 0.010858f,-0.133914f, 0.011376f,-0.122538f, 0.011823f,-0.110716f, 0.012199f,-0.098516f, 0.012502f,-0.086014f, 0.012732f,-0.073282f, 0.012887f,-0.060395f, 0.012967f,-0.047428f, 0.012973f,-0.034455f, 0.012905f,-0.021550f, 0.012765f,-0.008785f, 0.012553f,0.003768f, 0.012271f,0.016039f, 0.011922f,0.027961f, 0.011510f,0.039471f, 0.011034f,
	0.050505f, 0.010500f,0.061005f, 0.009912f,0.070917f, 0.009273f,0.080190f, 0.008587f,0.088777f, 0.007858f,0.096635f, 0.007093f,0.103728f, 0.006295f,0.110023f, 0.005469f,0.115492f, 0.004622f,0.120114f, 0.003757f,0.123871f, 0.002881f,0.126752f, 0.002000f,0.128752f, 0.001118f,0.129870f, 0.000242f,0.130112f, -0.000624f,0.129488f, -0.001474f,
	0.128013f, -0.002302f,0.125711f, -0.003105f,0.122606f, -0.003876f,0.118730f, -0.004611f,0.114119f, -0.005306f,0.108813f, -0.005956f,0.102857f, -0.006558f,0.096299f, -0.007109f,0.089190f, -0.007604f,0.081586f, -0.008042f,0.073544f, -0.008420f,0.065124f, -0.008736f,0.056388f, -0.008988f,0.047400f, -0.009176f,0.038224f, -0.009299f,0.028925f, -0.009356f,
	0.019569f, -0.009348f,0.010221f, -0.009275f,0.000946f, -0.009139f,-0.008193f, -0.008940f,-0.017133f, -0.008683f,-0.025816f, -0.008367f,-0.034183f, -0.007996f,-0.042180f, -0.007574f,-0.049753f, -0.007102f,-0.056856f, -0.006587f,-0.063443f, -0.006031f,-0.069474f, -0.005438f,-0.074912f, -0.004814f,-0.079726f, -0.004163f,-0.083889f, -0.003489f,-0.087377f, -0.002798f,
	-0.090175f, -0.002095f,-0.092270f, -0.001385f,-0.093655f, -0.000674f,-0.094329f, 0.000035f,-0.094295f, 0.000734f,-0.093560f, 0.001420f,-0.092140f, 0.002088f,-0.090052f, 0.002733f,-0.087320f, 0.003350f,-0.083970f, 0.003935f,-0.080035f, 0.004484f,-0.075552f, 0.004994f,-0.070557f, 0.005460f,-0.065097f, 0.005881f,-0.059217f, 0.006252f,-0.052964f, 0.006573f,
	-0.046391f, 0.006841f,-0.039550f, 0.007053f,-0.032497f, 0.007211f,-0.025287f, 0.007312f,-0.017975f, 0.007356f,-0.010619f, 0.007344f,-0.003275f, 0.007276f,0.004001f, 0.007153f,0.011153f, 0.006976f,0.018130f, 0.006748f,0.024878f, 0.006471f,0.031349f, 0.006147f,0.037495f, 0.005779f,0.043274f, 0.005370f,0.048644f, 0.004924f,0.053568f, 0.004444f,
	0.058012f, 0.003935f,0.061947f, 0.003401f,0.065347f, 0.002845f,0.068193f, 0.002273f,0.070466f, 0.001690f,0.072156f, 0.001100f,0.073256f, 0.000506f,0.073762f, -0.000085f,0.073678f, -0.000669f,0.073009f, -0.001242f,0.071766f, -0.001799f,0.069967f, -0.002336f,0.067631f, -0.002850f,0.064781f, -0.003336f,0.061446f, -0.003789f,0.057656f, -0.004209f,
	0.053447f, -0.004590f,0.048857f, -0.004931f,0.043926f, -0.005229f,0.038697f, -0.005483f,0.033214f, -0.005689f,0.027525f, -0.005848f,0.021677f, -0.005959f,0.015718f, -0.006020f,0.009699f, -0.006032f,0.003666f, -0.005995f,-0.002328f, -0.005910f,-0.008239f, -0.005779f,-0.014017f, -0.005601f,-0.019618f, -0.005379f,-0.024997f, -0.005117f,-0.030115f, -0.004815f,
	-0.034929f, -0.004477f,-0.039406f, -0.004105f,-0.043512f, -0.003704f,-0.047216f, -0.003276f,-0.050492f, -0.002825f,-0.053318f, -0.002356f,-0.055674f, -0.001871f,-0.057545f, -0.001377f,-0.058922f, -0.000875f,-0.059797f, -0.000371f,-0.060168f, 0.000131f,-0.060038f, 0.000628f,-0.059410f, 0.001114f,-0.058295f, 0.001588f,-0.056708f, 0.002042f,-0.054666f, 0.002476f,
	-0.052190f, 0.002885f,-0.049305f, 0.003266f,-0.046039f, 0.003618f,-0.042421f, 0.003935f,-0.038486f, 0.004216f,-0.034270f, 0.004460f,-0.029810f, 0.004664f,-0.025146f, 0.004828f,-0.020318f, 0.004949f,-0.015370f, 0.005028f,-0.010341f, 0.005064f,-0.005278f, 0.005057f,-0.000221f, 0.005007f,0.004786f, 0.004916f,0.009703f, 0.004785f,0.014488f, 0.004614f,
	0.019102f, 0.004406f,0.023508f, 0.004162f,0.027671f, 0.003887f,0.031557f, 0.003580f,0.035137f, 0.003246f,0.038382f, 0.002887f,0.041269f, 0.002507f,0.043776f, 0.002109f,0.045885f, 0.001697f,0.047583f, 0.001274f,0.048857f, 0.000845f,0.049702f, 0.000412f,0.050114f, -0.000021f,0.050093f, -0.000450f,0.049643f, -0.000871f,0.048772f, -0.001280f,
	0.047491f, -0.001676f,0.045816f, -0.002053f,0.043762f, -0.002409f,0.041353f, -0.002742f,0.038611f, -0.003048f,0.035563f, -0.003325f,0.032238f, -0.003571f,0.028667f, -0.003785f,0.024882f, -0.003963f,0.020919f, -0.004107f,0.016812f, -0.004213f,0.012599f, -0.004283f,0.008316f, -0.004315f,0.004001f, -0.004308f,-0.000307f, -0.004266f,-0.004573f, -0.004186f,
	-0.008759f, -0.004072f,-0.012830f, -0.003922f,-0.016753f, -0.003741f,-0.020493f, -0.003528f,-0.024021f, -0.003287f,-0.027308f, -0.003018f,-0.030326f, -0.002727f,-0.033053f, -0.002415f,-0.035468f, -0.002083f,-0.037551f, -0.001737f,-0.039288f, -0.001379f,-0.040667f, -0.001011f,-0.041679f, -0.000639f,-0.042317f, -0.000263f,-0.042580f, 0.000110f,-0.042470f, 0.000480f,
	-0.041990f, 0.000843f,-0.041148f, 0.001195f,-0.039952f, 0.001533f,-0.038419f, 0.001856f,-0.036563f, 0.002158f,-0.034405f, 0.002440f,-0.031965f, 0.002698f,-0.029267f, 0.002929f,-0.026338f, 0.003133f,-0.023205f, 0.003309f,-0.019897f, 0.003452f,-0.016444f, 0.003565f,-0.012880f, 0.003645f,-0.009235f, 0.003692f,-0.005543f, 0.003707f,-0.001836f, 0.003688f,
	0.001852f, 0.003637f,0.005489f, 0.003555f,0.009044f, 0.003442f,0.012485f, 0.003299f,0.015785f, 0.003128f,0.018913f, 0.002932f,0.021845f, 0.002711f,0.024556f, 0.002468f,0.027024f, 0.002205f,0.029229f, 0.001925f,0.031154f, 0.001630f,0.032783f, 0.001324f,0.034107f, 0.001008f,0.035115f, 0.000685f,0.035800f, 0.000360f,0.036160f, 0.000034f,
	0.036194f, -0.000289f,0.035905f, -0.000607f,0.035298f, -0.000917f,0.034381f, -0.001216f,0.033165f, -0.001502f,0.031663f, -0.001771f,0.029892f, -0.002024f,0.027868f, -0.002255f,0.025613f, -0.002464f,0.023148f, -0.002650f,0.020498f, -0.002811f,0.017688f, -0.002945f,0.014743f, -0.003051f,0.011692f, -0.003129f,0.008563f, -0.003179f,0.005384f, -0.003200f,
	0.002184f, -0.003192f,-0.001008f, -0.003155f,-0.004163f, -0.003091f,-0.007254f, -0.002999f,-0.010252f, -0.002881f,-0.013133f, -0.002739f,-0.015872f, -0.002573f,-0.018445f, -0.002385f,-0.020830f, -0.002178f,-0.023008f, -0.001952f,-0.024961f, -0.001711f,-0.026672f, -0.001457f,-0.028129f, -0.001192f,-0.029321f, -0.000919f,-0.030240f, -0.000639f,-0.030879f, -0.000356f,
	-0.031235f, -0.000072f,-0.031308f, 0.000209f,-0.031098f, 0.000487f,-0.030611f, 0.000758f,-0.029853f, 0.001020f,-0.028833f, 0.001270f,-0.027563f, 0.001506f,-0.026057f, 0.001728f,-0.024329f, 0.001930f,-0.022399f, 0.002115f,-0.020284f, 0.002279f,-0.018005f, 0.002420f,-0.015585f, 0.002539f,-0.013046f, 0.002634f,-0.010412f, 0.002703f,-0.007709f, 0.002748f,
	-0.004961f, 0.002767f,-0.002194f, 0.002762f,0.000568f, 0.002731f,0.003299f, 0.002675f,0.005974f, 0.002596f,0.008571f, 0.002495f,0.011065f, 0.002371f,0.013436f, 0.002227f,0.015663f, 0.002064f,0.017726f, 0.001883f,0.019609f, 0.001687f,0.021297f, 0.001477f,0.022774f, 0.001256f,0.024030f, 0.001025f,0.025055f, 0.000787f,0.025842f, 0.000544f,
	0.026386f, 0.000299f,0.026685f, 0.000051f,0.026736f, -0.000194f,0.026542f, -0.000435f,0.026107f, -0.000670f,0.025437f, -0.000897f,0.024540f, -0.001113f,0.023426f, -0.001318f,0.022108f, -0.001509f,0.020599f, -0.001684f,0.018915f, -0.001843f,0.017071f, -0.001983f,0.015088f, -0.002104f,0.012984f, -0.002205f,0.010778f, -0.002284f,0.008494f, -0.002343f,
	0.006151f, -0.002379f,0.003772f, -0.002393f,0.001380f, -0.002384f,-0.001005f, -0.002355f,-0.003359f, -0.002304f,-0.005663f, -0.002232f,-0.007895f, -0.002141f,-0.010036f, -0.002030f,-0.012066f, -0.001902f,-0.013969f, -0.001758f,-0.015727f, -0.001599f,-0.017326f, -0.001426f,-0.018752f, -0.001243f,-0.019995f, -0.001049f,-0.021044f, -0.000847f,-0.021891f, -0.000640f,
	-0.022531f, -0.000428f,-0.022959f, -0.000215f,-0.023174f, -0.000001f,-0.023175f, 0.000211f,-0.022964f, 0.000418f,-0.022546f, 0.000620f,-0.021926f, 0.000816f,-0.021110f, 0.001001f,-0.020109f, 0.001175f,-0.018934f, 0.001337f,-0.017597f, 0.001486f,-0.016111f, 0.001619f,-0.014492f, 0.001736f,-0.012756f, 0.001837f,-0.010920f, 0.001918f,-0.009002f, 0.001982f,
	-0.007020f, 0.002027f,-0.004993f, 0.002052f,-0.002940f, 0.002060f,-0.000880f, 0.002047f,0.001167f, 0.002017f,0.003183f, 0.001965f,0.005148f, 0.001899f,0.007047f, 0.001815f,0.008862f, 0.001714f,0.010576f, 0.001599f,0.012175f, 0.001469f,0.013645f, 0.001329f,0.014973f, 0.001176f,0.016149f, 0.001015f,0.017164f, 0.000844f,0.018008f, 0.000668f,
	0.018676f, 0.000488f,0.019164f, 0.000304f,0.019468f, 0.000119f,0.019587f, -0.000065f,0.019523f, -0.000248f,0.019275f, -0.000425f,0.018850f, -0.000597f,0.018253f, -0.000762f,0.017491f, -0.000919f,0.016572f, -0.001065f,0.015507f, -0.001201f,0.014306f, -0.001325f,0.012981f, -0.001434f,0.011547f, -0.001529f,0.010019f, -0.001609f,0.008410f, -0.001674f,
	0.006736f, -0.001722f,0.005014f, -0.001754f,0.003260f, -0.001769f,0.001491f, -0.001768f,-0.000278f, -0.001751f,-0.002029f, -0.001717f,-0.003746f, -0.001667f,-0.005413f, -0.001603f,-0.007016f, -0.001524f,-0.008540f, -0.001433f,-0.009973f, -0.001328f,-0.011301f, -0.001211f,-0.012513f, -0.001086f,-0.013598f, -0.000950f,-0.014549f, -0.000808f,-0.015356f, -0.000659f,
	-0.016015f, -0.000505f,-0.016520f, -0.000348f,-0.016868f, -0.000190f,-0.017058f, -0.000031f,-0.017089f, 0.000126f,-0.016963f, 0.000282f,-0.016681f, 0.000432f,-0.016249f, 0.000577f,-0.015672f, 0.000716f,-0.014956f, 0.000845f,-0.014111f, 0.000968f,-0.013143f, 0.001078f,-0.012065f, 0.001179f,-0.010886f, 0.001267f,-0.009619f, 0.001342f,-0.008278f, 0.001404f,
	-0.006873f, 0.001452f,-0.005421f, 0.001486f,-0.003935f, 0.001507f,-0.002429f, 0.001512f,-0.000917f, 0.001503f,0.000586f, 0.001480f,0.002066f, 0.001444f,0.003510f, 0.001395f,0.004906f, 0.001332f,0.006238f, 0.001259f,0.007497f, 0.001174f,0.008670f, 0.001078f,0.009749f, 0.000974f,0.010723f, 0.000862f,0.011585f, 0.000742f,0.012326f, 0.000616f,
	0.012943f, 0.000487f,0.013430f, 0.000353f,0.013783f, 0.000218f,0.014000f, 0.000082f,0.014082f, -0.000053f,0.014028f, -0.000187f,0.013841f, -0.000318f,0.013524f, -0.000444f,0.013080f, -0.000565f,0.012514f, -0.000679f,0.011835f, -0.000787f,0.011048f, -0.000885f,0.010163f, -0.000975f,0.009188f, -0.001054f,0.008134f, -0.001123f,0.007011f, -0.001180f,
	0.005831f, -0.001226f,0.004605f, -0.001260f,0.003345f, -0.001282f,0.002063f, -0.001292f,0.000772f, -0.001289f,-0.000517f, -0.001274f,-0.001791f, -0.001247f,-0.003038f, -0.001210f,-0.004248f, -0.001161f,-0.005409f, -0.001102f,-0.006511f, -0.001032f,-0.007544f, -0.000954f,-0.008498f, -0.000868f,-0.009366f, -0.000776f,-0.010142f, -0.000675f,-0.010816f, -0.000570f,
	-0.011387f, -0.000461f,-0.011847f, -0.000349f,-0.012196f, -0.000234f,-0.012430f, -0.000119f,-0.012549f, -0.000003f,-0.012551f, 0.000112f,-0.012439f, 0.000223f,-0.012216f, 0.000332f,-0.011884f, 0.000437f,-0.011447f, 0.000536f,-0.010911f, 0.000629f,-0.010283f, 0.000715f,-0.009567f, 0.000794f,-0.008773f, 0.000864f,-0.007909f, 0.000924f,-0.006985f, 0.000977f,
	-0.006008f, 0.001018f,-0.004990f, 0.001051f,-0.003939f, 0.001072f,-0.002867f, 0.001084f,-0.001783f, 0.001084f,-0.000699f, 0.001075f,0.000377f, 0.001056f,0.001432f, 0.001026f,0.002459f, 0.000988f,0.003447f, 0.000941f,0.004387f, 0.000885f,0.005272f, 0.000821f,0.006093f, 0.000750f,0.006843f, 0.000672f,0.007515f, 0.000591f,0.008106f, 0.000503f,
	0.008609f, 0.000411f,0.009020f, 0.000317f,0.009337f, 0.000221f,0.009558f, 0.000124f,0.009682f, 0.000026f,0.009708f, -0.000070f,0.009637f, -0.000165f,0.009472f, -0.000258f,0.009214f, -0.000347f,0.008867f, -0.000431f,0.008436f, -0.000511f,0.007925f, -0.000585f,0.007340f, -0.000653f,0.006688f, -0.000714f,0.005974f, -0.000767f,0.005207f, -0.000812f,
	0.004395f, -0.000850f,0.003545f, -0.000878f,0.002667f, -0.000899f,0.001768f, -0.000910f,0.000858f, -0.000912f,-0.000054f, -0.000907f,-0.000961f, -0.000892f,-0.001853f, -0.000870f,-0.002723f, -0.000839f,-0.003562f, -0.000800f,-0.004361f, -0.000754f,-0.005116f, -0.000702f,-0.005818f, -0.000644f,-0.006462f, -0.000580f,-0.007042f, -0.000511f,-0.007553f, -0.000439f,
	-0.007993f, -0.000363f,-0.008356f, -0.000285f,-0.008640f, -0.000204f,-0.008844f, -0.000123f,-0.008967f, -0.000041f,-0.009008f, 0.000040f,-0.008968f, 0.000120f,-0.008848f, 0.000197f,-0.008651f, 0.000272f,-0.008380f, 0.000343f,-0.008036f, 0.000411f,-0.007625f, 0.000474f,-0.007151f, 0.000531f,-0.006620f, 0.000583f,-0.006037f, 0.000629f,-0.005408f, 0.000667f,
	-0.004741f, 0.000699f,-0.004041f, 0.000725f,-0.003316f, 0.000743f,-0.002574f, 0.000754f,-0.001820f, 0.000757f,-0.001063f, 0.000753f,-0.000311f, 0.000742f,0.000431f, 0.000723f,0.001154f, 0.000698f,0.001852f, 0.000667f,0.002519f, 0.000630f,0.003149f, 0.000587f,0.003736f, 0.000539f,0.004275f, 0.000487f,0.004762f, 0.000429f,0.005191f, 0.000370f,
	0.005561f, 0.000307f,0.005868f, 0.000241f,0.006109f, 0.000175f,0.006284f, 0.000107f,0.006392f, 0.000039f,0.006431f, -0.000027f,0.006404f, -0.000094f,0.006310f, -0.000159f,0.006151f, -0.000222f,0.005929f, -0.000282f,0.005647f, -0.000338f,0.005309f, -0.000389f,0.004920f, -0.000438f,0.004482f, -0.000482f,0.004000f, -0.000520f,0.003480f, -0.000552f,
	0.002928f, -0.000580f,0.002348f, -0.000601f,0.001748f, -0.000617f,0.001131f, -0.000626f,0.000505f, -0.000629f,-0.000124f, -0.000626f,-0.000750f, -0.000618f,-0.001368f, -0.000603f,-0.001971f, -0.000583f,-0.002554f, -0.000558f,-0.003112f, -0.000528f,-0.003640f, -0.000492f,-0.004132f, -0.000453f,-0.004585f, -0.000411f,-0.004996f, -0.000364f,-0.005360f, -0.000314f,
	-0.005674f, -0.000263f,-0.005938f, -0.000209f,-0.006147f, -0.000155f,-0.006302f, -0.000099f,-0.006400f, -0.000043f,-0.006443f, 0.000012f,-0.006431f, 0.000068f,-0.006363f, 0.000120f,-0.006243f, 0.000173f,-0.006070f, 0.000221f,-0.005849f, 0.000267f,-0.005582f, 0.000310f,-0.005271f, 0.000350f,-0.004921f, 0.000386f,-0.004535f, 0.000417f,-0.004118f, 0.000444f,
	-0.003673f, 0.000467f,-0.003206f, 0.000484f,-0.002722f, 0.000497f,-0.002225f, 0.000505f,-0.001719f, 0.000508f,-0.001212f, 0.000506f,-0.000706f, 0.000498f,-0.000208f, 0.000487f,0.000279f, 0.000470f,0.000749f, 0.000449f,0.001198f, 0.000425f,0.001623f, 0.000396f,0.002019f, 0.000364f,0.002383f, 0.000329f,0.002712f, 0.000291f,0.003003f, 0.000251f,
	0.003254f, 0.000209f,0.003463f, 0.000165f,0.003628f, 0.000121f,0.003749f, 0.000075f,0.003825f, 0.000030f,0.003854f, -0.000015f,0.003839f, -0.000059f,0.003780f, -0.000103f,0.003677f, -0.000145f,0.003533f, -0.000184f,0.003349f, -0.000222f,0.003127f, -0.000257f,0.002870f, -0.000289f,0.002581f, -0.000317f,0.002263f, -0.000343f,0.001921f, -0.000365f,
	0.001556f, -0.000382f,0.001174f, -0.000397f,0.000777f, -0.000406f,0.000371f, -0.000413f,-0.000042f, -0.000414f,-0.000456f, -0.000412f,-0.000868f, -0.000406f,-0.001274f, -0.000396f,-0.001670f, -0.000382f,-0.002053f, -0.000364f,-0.002417f, -0.000344f,-0.002761f, -0.000322f,-0.003082f, -0.000294f,-0.003377f, -0.000265f,-0.003642f, -0.000234f,-0.003877f, -0.000201f,
	-0.004077f, -0.000165f,-0.004242f, -0.000129f,-0.004372f, -0.000092f,-0.004463f, -0.000055f,-0.004518f, -0.000017f,-0.004535f, 0.000021f,-0.004514f, 0.000059f,-0.004455f, 0.000095f,-0.004360f, 0.000131f,-0.004230f, 0.000165f,-0.004065f, 0.000198f,-0.003867f, 0.000228f,-0.003639f, 0.000256f,-0.003383f, 0.000283f,-0.003100f, 0.000307f,-0.002793f, 0.000328f,
	-0.002465f, 0.000347f,-0.002118f, 0.000362f,-0.001756f, 0.000375f,-0.001381f, 0.000384f,-0.000997f, 0.000391f,-0.000606f, 0.000396f,-0.000209f, 0.000397f,0.000188f, 0.000396f,0.000584f, 0.000392f,0.000976f, 0.000386f,0.001361f, 0.000378f,0.001739f, 0.000367f,0.002105f, 0.000354f,0.002459f, 0.000340f,0.002799f, 0.000324f,0.003123f, 0.000308f,
	0.003431f, 0.000290f,0.003722f, 0.000271f,0.003993f, 0.000252f,0.004245f, 0.000234f,0.004479f, 0.000215f,0.004694f, 0.000196f,0.004890f, 0.000178f,0.005067f, 0.000161f,0.005228f, 0.000144f,0.005372f, 0.000128f,0.005499f, 0.000114f,0.005613f, 0.000101f,0.005714f, 0.000089f,0.005803f, 0.000079f,0.005882f, 0.000071f,0.005953f, 0.000064f,
	0.006017f, 0.000059f,0.006076f, 0.000055f,0.006132f, 0.000053f,0.006185f, 0.000052f,0.006238f, 0.000054f,0.006292f, 0.000056f,0.006348f, 0.000060f,0.006408f, 0.000065f,0.006473f, 0.000070f,0.006543f, 0.000076f,0.006619f, 0.000083f,0.006702f, 0.000090f,0.006791f, 0.000096f,0.006888f, 0.000104f,0.006992f, 0.000109f,0.007101f, 0.000116f,
	0.007217f, 0.000121f,0.007338f, 0.000125f,0.007463f, 0.000127f,0.007591f, 0.000128f,0.007719f, 0.000128f,0.007847f, 0.000126f,0.007973f, 0.000122f,0.008095f, 0.000115f,0.008210f, 0.000107f,0.008317f, 0.000096f,0.008412f, 0.000082f,0.008494f, 0.000067f,0.008561f, 0.000049f,0.008610f, 0.000028f,0.008638f, 0.000005f,0.008644f, -0.000020f,
	0.008624f, -0.000047f,0.008577f, -0.000077f,0.008500f, -0.000108f,0.008392f, -0.000140f,0.008252f, -0.000174f,0.008078f, -0.000211f,0.007867f, -0.000247f,0.007620f, -0.000283f,0.007337f, -0.000322f,0.007015f, -0.000359f,0.006656f, -0.000396f,0.006260f, -0.000433f,0.005827f, -0.000469f,0.005359f, -0.000503f,0.004855f, -0.000537f,0.004318f, -0.000568f,
	0.003750f, -0.000598f,0.003152f, -0.000624f,0.002528f, -0.000647f,0.001881f, -0.000667f,0.001214f, -0.000684f,0.000530f, -0.000697f,-0.000167f, -0.000708f,-0.000875f, -0.000714f,-0.001589f, -0.000715f,-0.002304f, -0.000712f,-0.003016f, -0.000705f,-0.003721f, -0.000692f,-0.004413f, -0.000677f,-0.005090f, -0.000656f,-0.005746f, -0.000630f,-0.006377f, -0.000601f,
	-0.006978f, -0.000567f,-0.007545f, -0.000528f,-0.008073f, -0.000487f,-0.008561f, -0.000441f,-0.009002f, -0.000393f,-0.009395f, -0.000340f,-0.009735f, -0.000286f,-0.010021f, -0.000228f,-0.010249f, -0.000169f,-0.010418f, -0.000108f,-0.010526f, -0.000046f,-0.010572f, 0.000017f,-0.010556f, 0.000080f,-0.010475f, 0.000144f,-0.010331f, 0.000206f,-0.010125f, 0.000268f,
	-0.009858f, 0.000328f,-0.009530f, 0.000386f,-0.009144f, 0.000441f,-0.008703f, 0.000497f,-0.008206f, 0.000545f,-0.007661f, 0.000591f,-0.007070f, 0.000633f,-0.006438f, 0.000671f,-0.005767f, 0.000705f,-0.005062f, 0.000733f,-0.004328f, 0.000757f,-0.003572f, 0.000775f,-0.002797f, 0.000787f,-0.002009f, 0.000794f,-0.001216f, 0.000796f,-0.000420f, 0.000791f,
	0.000371f, 0.000782f,0.001153f, 0.000766f,0.001919f, 0.000744f,0.002663f, 0.000718f,0.003381f, 0.000685f,0.004066f, 0.000649f,0.004715f, 0.000608f,0.005323f, 0.000561f,0.005884f, 0.000511f,0.006396f, 0.000458f,0.006854f, 0.000400f,0.007253f, 0.000340f,0.007594f, 0.000277f,0.007871f, 0.000213f,0.008083f, 0.000147f,0.008230f, 0.000080f,
	0.008310f, 0.000012f,0.008322f, -0.000055f,0.008267f, -0.000122f,0.008145f, -0.000189f,0.007956f, -0.000252f,0.007704f, -0.000315f,0.007389f, -0.000375f,0.007014f, -0.000431f,0.006584f, -0.000484f,0.006100f, -0.000534f,0.005566f, -0.000580f,0.004985f, -0.000619f,0.004367f, -0.000655f,0.003711f, -0.000686f,0.003025f, -0.000710f,0.002316f, -0.000730f,
	0.001585f, -0.000745f,0.000840f, -0.000755f,0.000085f, -0.000755f,-0.000670f, -0.000752f,-0.001422f, -0.000744f,-0.002166f, -0.000726f,-0.002892f, -0.000707f,-0.003599f, -0.000681f,-0.004279f, -0.000650f,-0.004929f, -0.000614f,-0.005543f, -0.000573f,-0.006115f, -0.000527f,-0.006643f, -0.000478f,-0.007121f, -0.000426f,-0.007547f, -0.000370f,-0.007917f, -0.000311f,
	-0.008228f, -0.000251f,-0.008479f, -0.000189f,-0.008667f, -0.000125f,-0.008793f, -0.000061f,-0.008853f, 0.000003f,-0.008850f, 0.000067f,-0.008783f, 0.000131f,-0.008652f, 0.000193f,-0.008459f, 0.000252f,-0.008207f, 0.000311f,-0.007896f, 0.000365f,-0.007531f, 0.000418f,-0.007113f, 0.000465f,-0.006648f, 0.000509f,-0.006139f, 0.000550f,-0.005589f, 0.000584f,
	-0.005005f, 0.000615f,-0.004390f, 0.000640f,-0.003750f, 0.000659f,-0.003091f, 0.000673f,-0.002418f, 0.000683f,-0.001734f, 0.000687f,-0.001047f, 0.000684f,-0.000363f, 0.000677f,0.000314f, 0.000664f,0.000978f, 0.000645f,0.001623f, 0.000620f,0.002243f, 0.000592f,0.002835f, 0.000559f,0.003395f, 0.000521f,0.003916f, 0.000479f,0.004395f, 0.000434f,
	0.004829f, 0.000385f,0.005215f, 0.000333f,0.005548f, 0.000280f,0.005828f, 0.000224f,0.006052f, 0.000166f,0.006219f, 0.000108f,0.006326f, 0.000048f,0.006374f, -0.000012f,0.006362f, -0.000070f,0.006292f, -0.000128f,0.006164f, -0.000185f,0.005980f, -0.000240f,0.005740f, -0.000292f,0.005448f, -0.000343f,0.005105f, -0.000388f,0.004717f, -0.000432f,
	0.004285f, -0.000471f,0.003814f, -0.000507f,0.003307f, -0.000537f,0.002771f, -0.000562f,0.002209f, -0.000585f,0.001623f, -0.000601f,0.001022f, -0.000611f,0.000412f, -0.000617f,-0.000205f, -0.000618f,-0.000823f, -0.000614f,-0.001437f, -0.000604f,-0.002041f, -0.000589f,-0.002630f, -0.000570f,-0.003200f, -0.000546f,-0.003745f, -0.000517f,-0.004262f, -0.000484f,
	-0.004746f, -0.000449f,-0.005195f, -0.000408f,-0.005603f, -0.000364f,-0.005967f, -0.000319f,-0.006285f, -0.000269f,-0.006555f, -0.000219f,-0.006774f, -0.000167f,-0.006941f, -0.000113f,-0.007054f, -0.000060f,-0.007114f, -0.000004f,-0.007119f, 0.000047f,-0.007071f, 0.000101f,-0.006971f, 0.000152f,-0.006819f, 0.000202f,-0.006616f, 0.000252f,-0.006365f, 0.000297f,
	-0.006067f, 0.000341f,-0.005727f, 0.000380f,-0.005347f, 0.000417f,-0.004930f, 0.000448f,-0.004482f, 0.000479f,-0.004004f, 0.000502f,-0.003502f, 0.000521f,-0.002981f, 0.000536f,-0.002445f, 0.000548f,-0.001897f, 0.000552f,-0.001345f, 0.000554f,-0.000791f, 0.000551f,-0.000240f, 0.000542f,0.000301f, 0.000529f,0.000830f, 0.000510f,0.001340f, 0.000489f,
	0.001829f, 0.000463f,0.002292f, 0.000434f,0.002726f, 0.000400f,0.003126f, 0.000363f,0.003488f, 0.000323f,0.003812f, 0.000281f,0.004093f, 0.000237f,0.004329f, 0.000191f,0.004520f, 0.000144f,0.004664f, 0.000095f,0.004759f, 0.000046f,0.004806f, -0.000003f,0.004803f, -0.000051f,0.004751f, -0.000100f,0.004652f, -0.000146f,0.004506f, -0.000191f,
	0.004314f, -0.000235f,0.004079f, -0.000277f,0.003802f, -0.000314f,0.003488f, -0.000350f,0.003138f, -0.000381f,0.002757f, -0.000410f,0.002347f, -0.000435f,0.001912f, -0.000456f,0.001456f, -0.000475f,0.000981f, -0.000485f,0.000496f, -0.000493f,0.000002f, -0.000497f,-0.000495f, -0.000497f,-0.000991f, -0.000491f,-0.001483f, -0.000482f,-0.001965f, -0.000470f,
	-0.002435f, -0.000451f,-0.002886f, -0.000430f,-0.003316f, -0.000405f,-0.003721f, -0.000376f,-0.004098f, -0.000345f,-0.004443f, -0.000311f,-0.004753f, -0.000273f,-0.005027f, -0.000234f,-0.005261f, -0.000193f,-0.005454f, -0.000151f,-0.005605f, -0.000107f,-0.005712f, -0.000063f,-0.005775f, -0.000019f,-0.005794f, 0.000026f,-0.005767f, 0.000069f,-0.005698f, 0.000113f,
	-0.005585f, 0.000154f,-0.005430f, 0.000194f,-0.005237f, 0.000233f,-0.005004f, 0.000269f,-0.004735f, 0.000302f,-0.004434f, 0.000331f,-0.004102f, 0.000359f,-0.003743f, 0.000382f,-0.003361f, 0.000402f,-0.002959f, 0.000419f,-0.002540f, 0.000432f,-0.002107f, 0.000440f,-0.001667f, 0.000445f,-0.001222f, 0.000445f,-0.000777f, 0.000444f,-0.000333f, 0.000436f,
	0.000102f, 0.000425f,0.000527f, 0.000410f,0.000938f, 0.000392f,0.001330f, 0.000370f,0.001700f, 0.000345f,0.002045f, 0.000318f,0.002363f, 0.000286f,0.002649f, 0.000254f,0.002903f, 0.000218f,0.003121f, 0.000183f,0.003304f, 0.000143f,0.003447f, 0.000105f,0.003552f, 0.000065f,0.003617f, 0.000024f,0.003641f, -0.000016f,0.003625f, -0.000056f,
	0.003570f, -0.000094f,0.003475f, -0.000132f,0.003344f, -0.000169f,0.003175f, -0.000202f,0.002972f, -0.000236f,0.002737f, -0.000265f,0.002471f, -0.000294f,0.002177f, -0.000319f,0.001858f, -0.000341f,0.001518f, -0.000359f,0.001159f, -0.000374f,0.000785f, -0.000386f,0.000399f, -0.000394f,0.000005f, -0.000399f,-0.000394f, -0.000399f,-0.000793f, -0.000398f,
	-0.001190f, -0.000391f,-0.001581f, -0.000380f,-0.001961f, -0.000367f,-0.002328f, -0.000351f,-0.002679f, -0.000332f,-0.003011f, -0.000310f,-0.003320f, -0.000282f,-0.003603f, -0.000256f,-0.003859f, -0.000226f,-0.004084f, -0.000195f,-0.004279f, -0.000162f,-0.004441f, -0.000127f,-0.004568f, -0.000092f,-0.004660f, -0.000056f,-0.004716f, -0.000020f,-0.004736f, 0.000017f,
	-0.004719f, 0.000052f,-0.004667f, 0.000086f,-0.004581f, 0.000120f,-0.004461f, 0.000154f,-0.004308f, 0.000186f,-0.004122f, 0.000214f,-0.003908f, 0.000241f,-0.003666f, 0.000266f,-0.003401f, 0.000288f,-0.003113f, 0.000307f,-0.002807f, 0.000322f,-0.002484f, 0.000337f,-0.002147f, 0.000346f,-0.001801f, 0.000354f,-0.001447f, 0.000356f,-0.001091f, 0.000357f,
	-0.000734f, 0.000354f,-0.000380f, 0.000347f,-0.000033f, 0.000337f,0.000304f, 0.000325f,0.000629f, 0.000310f,0.000939f, 0.000291f,0.001230f, 0.000271f,0.001502f, 0.000248f,0.001750f, 0.000223f,0.001973f, 0.000195f,0.002168f, 0.000167f,0.002336f, 0.000137f,0.002473f, 0.000106f,0.002579f, 0.000075f,0.002653f, 0.000042f,0.002696f, 0.000010f,
	0.002705f, -0.000024f,0.002682f, -0.000054f,0.002628f, -0.000086f,0.002542f, -0.000116f,0.002426f, -0.000145f,0.002281f, -0.000171f,0.002110f, -0.000197f,0.001913f, -0.000221f,0.001692f, -0.000242f,0.001450f, -0.000261f,0.001189f, -0.000278f,0.000911f, -0.000291f,0.000621f, -0.000301f,0.000319f, -0.000309f,0.000010f, -0.000315f,-0.000305f, -0.000317f,
	-0.000621f, -0.000317f,-0.000938f, -0.000311f,-0.001249f, -0.000304f,-0.001553f, -0.000296f,-0.001849f, -0.000284f,-0.002133f, -0.000269f,-0.002402f, -0.000252f,-0.002653f, -0.000232f,-0.002886f, -0.000212f,-0.003097f, -0.000188f,-0.003285f, -0.000163f,-0.003448f, -0.000136f,-0.003585f, -0.000109f,-0.003694f, -0.000082f,-0.003776f, -0.000053f,-0.003829f, -0.000024f,
	-0.003854f, 0.000004f,-0.003850f, 0.000033f,-0.003816f, 0.000062f,-0.003754f, 0.000089f,-0.003666f, 0.000115f,-0.003551f, 0.000140f,-0.003411f, 0.000164f,-0.003247f, 0.000185f,-0.003062f, 0.000205f,-0.002857f, 0.000224f,-0.002633f, 0.000239f,-0.002394f, 0.000253f,-0.002141f, 0.000262f,-0.001879f, 0.000272f,-0.001607f, 0.000277f,-0.001330f, 0.000280f,
	-0.001050f, 0.000281f,-0.000769f, 0.000279f,-0.000490f, 0.000273f,-0.000217f, 0.000267f,0.000050f, 0.000256f,0.000306f, 0.000245f,0.000551f, 0.000230f,0.000781f, 0.000214f,0.000995f, 0.000197f,0.001191f, 0.000175f,0.001366f, 0.000154f,0.001520f, 0.000131f,0.001651f, 0.000108f,0.001759f, 0.000084f,0.001843f, 0.000059f,0.001903f, 0.000033f,
	0.001935f, 0.000008f,0.001943f, -0.000018f,0.001924f, -0.000043f,0.001881f, -0.000066f,0.001815f, -0.000090f,0.001724f, -0.000114f,0.001611f, -0.000135f,0.001475f, -0.000154f,0.001321f, -0.000173f,0.001147f, -0.000190f,0.000957f, -0.000204f,0.000754f, -0.000216f,0.000538f, -0.000227f,0.000311f, -0.000235f,0.000076f, -0.000241f,-0.000165f, -0.000244f,
	-0.000409f, -0.000246f,-0.000655f, -0.000244f,-0.000899f, -0.000242f,-0.001141f, -0.000234f,-0.001375f, -0.000227f,-0.001602f, -0.000217f,-0.001819f, -0.000205f,-0.002024f, -0.000191f,-0.002215f, -0.000176f,-0.002391f, -0.000158f,-0.002550f, -0.000141f,-0.002690f, -0.000121f,-0.002811f, -0.000101f,-0.002912f, -0.000080f,-0.002992f, -0.000057f,-0.003049f, -0.000035f,
	-0.003084f, -0.000013f,-0.003097f, 0.000010f,-0.003087f, 0.000032f,-0.003055f, 0.000054f,-0.003001f, 0.000074f,-0.002927f, 0.000095f,-0.002832f, 0.000114f,-0.002719f, 0.000130f,-0.002589f, 0.000147f,-0.002442f, 0.000163f,-0.002279f, 0.000175f,-0.002104f, 0.000186f,-0.001918f, 0.000196f,-0.001722f, 0.000205f,-0.001517f, 0.000208f,-0.001310f, 0.000212f,
	-0.001097f, 0.000215f,-0.000883f, 0.000213f,-0.000669f, 0.000211f,-0.000458f, 0.000207f,-0.000251f, 0.000199f,-0.000052f, 0.000190f,0.000139f, 0.000181f,0.000319f, 0.000168f,0.000488f, 0.000156f,0.000644f, 0.000140f,0.000783f, 0.000127f,0.000910f, 0.000110f,0.001020f, 0.000092f,0.001111f, 0.000072f,0.001184f, 0.000053f,0.001237f, 0.000034f,
	0.001271f, 0.000014f,0.001285f, -0.000004f,0.001281f, -0.000025f,0.001256f, -0.000043f,0.001212f, -0.000062f,0.001151f, -0.000080f,0.001071f, -0.000097f,0.000974f, -0.000110f,0.000864f, -0.000126f,0.000738f, -0.000138f,0.000600f, -0.000150f,0.000450f, -0.000159f,0.000291f, -0.000168f,0.000123f, -0.000174f,-0.000052f, -0.000180f,-0.000232f, -0.000183f,
	-0.000415f, -0.000185f,-0.000601f, -0.000183f,-0.000784f, -0.000182f,-0.000965f, -0.000177f,-0.001142f, -0.000174f,-0.001316f, -0.000166f,-0.001482f, -0.000157f,-0.001639f, -0.000146f,-0.001784f, -0.000135f,-0.001920f, -0.000123f,-0.002042f, -0.000111f,-0.002153f, -0.000094f,-0.002247f, -0.000080f,-0.002327f, -0.000063f,-0.002390f, -0.000047f,-0.002437f, -0.000031f,
	-0.002468f, -0.000014f,-0.002482f, 0.000004f,-0.002478f, 0.000020f,-0.002459f, 0.000036f,-0.002423f, 0.000050f,-0.002373f, 0.000067f,-0.002306f, 0.000081f,-0.002225f, 0.000093f,-0.002132f, 0.000106f,-0.002025f, 0.000119f,-0.001906f, 0.000129f,-0.001777f, 0.000136f,-0.001641f, 0.000143f,-0.001497f, 0.000150f,-0.001348f, 0.000154f,-0.001193f, 0.000157f,
	-0.001037f, 0.000157f,-0.000880f, 0.000157f,-0.000722f, 0.000156f,-0.000566f, 0.000152f,-0.000415f, 0.000148f,-0.000267f, 0.000142f,-0.000124f, 0.000133f,0.000009f, 0.000125f,0.000134f, 0.000116f,0.000250f, 0.000104f,0.000354f, 0.000095f,0.000448f, 0.000081f,0.000529f, 0.000068f,0.000597f, 0.000055f,0.000652f, 0.000040f,0.000692f, 0.000026f,
	0.000718f, 0.000011f,0.000729f, -0.000004f,0.000725f, -0.000017f,0.000709f, -0.000032f,0.000677f, -0.000043f,0.000634f, -0.000057f,0.000576f, -0.000069f,0.000507f, -0.000080f,0.000427f, -0.000090f,0.000336f, -0.000099f,0.000237f, -0.000108f,0.000129f, -0.000115f,0.000014f, -0.000122f,-0.000109f, -0.000128f,-0.000237f, -0.000131f,-0.000368f, -0.000133f,
	-0.000501f, -0.000133f,-0.000634f, -0.000132f,-0.000766f, -0.000132f,-0.000898f, -0.000129f,-0.001027f, -0.000125f,-0.001153f, -0.000118f,-0.001271f, -0.000112f,-0.001382f, -0.000106f,-0.001489f, -0.000097f,-0.001586f, -0.000088f,-0.001674f, -0.000078f,-0.001752f, -0.000068f,-0.001819f, -0.000055f,-0.001875f, -0.000044f,-0.001918f, -0.000032f,-0.001951f, -0.000019f,
	-0.001970f, -0.000008f,-0.001978f, 0.000005f,-0.001973f, 0.000016f,-0.001957f, 0.000029f,-0.001928f, 0.000038f,-0.001890f, 0.000049f,-0.001841f, 0.000059f,-0.001782f, 0.000070f,-0.001712f, 0.000076f,-0.001635f, 0.000085f,-0.001550f, 0.000093f,-0.001458f, 0.000098f,-0.001360f, 0.000104f,-0.001256f, 0.000107f,-0.001149f, 0.000111f,-0.001038f, 0.000111f,
	-0.000926f, 0.000113f,-0.000813f, 0.000113f,-0.000700f, 0.000111f,-0.000589f, 0.000108f,-0.000481f, 0.000103f,-0.000379f, 0.000099f,-0.000280f, 0.000093f,-0.000187f, 0.000087f,-0.000099f, 0.000081f,-0.000018f, 0.000073f,0.000055f, 0.000064f,0.000119f, 0.000057f,0.000176f, 0.000046f,0.000221f, 0.000035f,0.000257f, 0.000026f,0.000283f, 0.000015f,
	0.000298f, 0.000005f,0.000303f, -0.000006f,0.000298f, -0.000014f,0.000283f, -0.000024f,0.000259f, -0.000033f,0.000226f, -0.000043f,0.000183f, -0.000050f,0.000133f, -0.000058f,0.000075f, -0.000065f,0.000010f, -0.000071f,-0.000061f, -0.000077f,-0.000138f, -0.000081f,-0.000219f, -0.000086f,-0.000305f, -0.000088f,-0.000394f, -0.000092f,-0.000485f, -0.000092f,
	-0.000577f, -0.000093f,-0.000671f, -0.000092f,-0.000762f, -0.000090f,-0.000853f, -0.000087f,-0.000939f, -0.000084f,-0.001023f, -0.000080f,-0.001104f, -0.000077f,-0.001181f, -0.000072f,-0.001252f, -0.000064f,-0.001316f, -0.000058f,-0.001374f, -0.000051f,-0.001425f, -0.000044f,-0.001469f, -0.000037f,-0.001505f, -0.000028f,-0.001533f, -0.000019f,-0.001552f, -0.000009f,
	-0.001561f, -0.000003f,-0.001564f, 0.000007f,-0.001557f, 0.000014f,-0.001543f, 0.000022f,-0.001521f, 0.000030f,-0.001492f, 0.000038f,-0.001454f, 0.000045f,-0.001409f, 0.000051f,-0.001358f, 0.000056f,-0.001302f, 0.000062f,-0.001239f, 0.000066f,-0.001174f, 0.000068f,-0.001106f, 0.000072f,-0.001034f, 0.000075f,-0.000958f, 0.000077f,-0.000881f, 0.000077f,
	-0.000804f, 0.000076f,-0.000728f, 0.000077f,-0.000652f, 0.000075f,-0.000577f, 0.000073f,-0.000504f, 0.000071f,-0.000433f, 0.000067f,-0.000366f, 0.000062f,-0.000304f, 0.000058f,-0.000246f, 0.000053f,-0.000192f, 0.000047f,-0.000145f, 0.000041f,-0.000104f, 0.000034f,-0.000071f, 0.000027f,-0.000043f, 0.000021f,-0.000023f, 0.000016f,-0.000007f, 1.000007f,
};



inline float downrampfrom1(float factor, float input)
{
	return 1 + ((input - 1)*factor);
}
void HyperCalculate_Spread(struct HyperSet_t *set, float spread, float size)
{
	float OrigLevel = 1.0;

	float fExtraSaws = size * 6;
	int nExtraSaws = (int)__min(floor(fExtraSaws) + 1, 6);
	if (fExtraSaws <= 0.000001f) nExtraSaws = 0;
	float fFracSaw = (float)(fExtraSaws - floor(fExtraSaws));
	float fSaws = 1 + fExtraSaws;
	int NewnSaws = nExtraSaws + 1;

	float NewSawLevel[MAXHYPER];

	float NewLevel = (OrigLevel*OrigLevel) / (downrampfrom1(-0.1f, fSaws) * 2);
	for (int i = 0; i<NewnSaws; i++)
	{
		NewSawLevel[i] = 1;
	};

	if (fabs(fFracSaw)>0.00001)
	{
		float FractLevel = fFracSaw*fFracSaw;
		NewSawLevel[NewnSaws - 1] = FractLevel;
	}
	float total = 0;

	for (int i = 0; i<NewnSaws; i++)
	{
		total += NewSawLevel[i];
	}
	for (int i = 0; i<NewnSaws; i++)
	{
		NewSawLevel[i] *= (1 / total)*NewLevel;
	}

	float Level = NewLevel;
	for (int i = 0; i<NewnSaws; i++)
	{
		set->Level[i] = NewSawLevel[i];
		set->iLevel[i] = (int)((1<<14) * set->Level[i]);
	};
	set->Active = NewnSaws;

	set->Freq[0] = 1;
	float DetuneMul  = (((1.0f) / 2.0f))*(spread * (1.0f / 6.0f))*(0.5f / (fSaws*0.5f));

	for (int i = 1; i<set->Active; i++)
	{
		float Detune = ((((float)i * DetuneMul)));
		if (i & 2)
		{
			set->Freq[i] = pow2(Detune);
		}
		else
		{
			set->Freq[i] = pow2(-Detune);
		};
	};
}


void AddBlep(float *fcircbuffer, int findex, float fscale, float fcrosstime)
{
	float ftempIndex = (fcrosstime*32.0f);
	int fb1 = (int)floor(ftempIndex);
	float ftempFraction = ftempIndex - (float)fb1;
	fb1 *= 2;
	for (int i = 0; i < 47; i++)
	{
		fcircbuffer[(findex ++) & 63] += fscale * (float)( (blep[fb1] +  ftempFraction *blep[fb1+1])) ;
		fb1 += 64;
	}
}


#ifndef WIN32
#define __INLINE inline
#define __ASM __asm__


__attribute__((always_inline)) static __INLINE int32_t SMMLA(int32_t acc, int32_t a, int32_t b)
{
	int32_t result;

	__ASM volatile ("smmla %0, %2, %3, %1" : "=r" (result) : "r" (acc), "r" (a), "r" (b));
	return result;
}
#else

int32_t SMMLA(int32_t acc, int32_t a, int32_t b)
{
	int64_t R = (int64_t)a * (int64_t)b;
	R >>= 32;
	R += acc;
	return (int32_t)R;
}

#endif


int32_t blepres[49] = { 8191, 8054, 5971, 117, -1185, 1048, -738, 475, -286, 156,
-71, 15, 17, -40, 50, -57, 55, -56, 47, -49, 36, -38, 23, -30, 12, -20, 49, 70,
-57, 3, 12, -41, 35, -49, 35, -45, 29, -38, 22, -31, 15, -25, 10, -20, 5, -16,
2, 0, 0 };


MEMATTR void AddBlepFixed(int32_t *circbuffer, int index, int32_t scale, uint32_t crosstime)
{
	uint32_t  tempIndex = crosstime;
	uint32_t b1 = tempIndex >> 27;

	uint32_t tempFraction2 = (tempIndex << 5);
	tempFraction2 >>= 16;

	int32_t tempFraction = tempIndex & ((1 << 28) - 1);
	tempFraction *= 8;
	int32_t scale2 = scale;
	//scale = scale * (int32_t)8192 ;
	scale <<= 17;
	b1 *= 2;
	for (int i = 0; i < 47; i++)
	{
		int32_t A = intblep[b1]>>1;
		int32_t B = intblep[b1 + 1]>>1;	
		int32_t C = SMMLA(A, B , tempFraction)  ;

		circbuffer[index]  = SMMLA(circbuffer[index], C, scale ) ;
		
		index = (index + 1)&63;
		b1 += 64;
	}
}



MEMATTR void AddBlepFixedRef(int32_t *circbuffer, int index, int32_t scale, uint32_t crosstime)
{
	uint32_t  tempIndex = crosstime;
	uint32_t b1 = tempIndex >> 27;
	uint32_t tempFraction = (tempIndex << 5);
	tempFraction >>= 16;
	b1 *= 2;
	for (int i = 0; i < 47; i++)
	{
		int32_t A = intblep[b1];
		int32_t B = intblep[b1 + 1];
		int32_t C = tempFraction * B;
		C >>= 16;
		C += A;   // C = A + B * tempfraction
		C >>= 2;
		C *= scale;
		C >>= 14;
		circbuffer[(index) & 63] += C;
		index++;
		b1 += 64;
	}
}


/*
void AddBlep_Int(int32_t *circbuffer, int index, int32_t scale, int32_t crosstime)
{
	int32_t tempIndex = (crosstime*32.0f);
	int32_t tempFraction = tempIndex & 0xffffff;

	tempIndex >>= 24;

	for (int i = 0; i < 47; i++)
	{
		int64_t R = ((1 << 24) - LERPINT(tempFraction, intblep[tempIndex], intblep[tempIndex + 1], 24));
		R *= scale;
		R >>= 24;
		circbuffer[(index + i) % 48] += int(R);
		
		tempIndex += 32;
	}
}
*/


void WaveBlepOsc_Init(struct WaveBlep_t *osc)
{
	osc->index = 0;
	osc->mMasterPhase = 0;
	osc->mSlavePhase = 0;
	osc->OutVal = 0;
	osc->PrevOut = 0;
	osc->mPhaseIncrement = 0.1f;
	osc->waveindex = 0;
	for (int i = 0; i < 64; i++)
	{
		osc->circularBuffer[i] = 0;
		osc->circularBufferInt[i] = 0;
	}
}
void WaveBlepOsc_Update(struct WaveBlep_t *osc, float odsr, float centerfreq, float size, float spread)
{
	float C = centerfreq * odsr;
	osc->mPhaseIncrement = C;
	osc->speedmul = (2 + (size * (6.0f / 65536.0f)));
	osc->mPhaseIncrement2 = osc->mPhaseIncrement * osc->speedmul;
	size /= 32768.0f;
	spread /= 32768.0f;
	osc->wavea[0] = sinf(size);
	osc->wavea[1] = sinf(size*1.1f);
	osc->wavea[2] = sinf(size*1.2f);
	osc->wavea[3] = cosf(spread*3.10f);
	osc->wavea[4] = cosf(spread*2.4f);
	osc->wavea[5] = cosf(size*1.1230f);
	osc->wavea[6] = cosf(spread*5.20f);
	osc->wavea[7] = sinf(size * .510f + spread*0.6120f);
	osc->waveb[0] = sinf(size*1.4f);
	osc->waveb[1] = sinf(size*1.5f);
	osc->waveb[2] = sinf(size*1.7f);
	osc->waveb[3] = cosf(spread*5.10f);
	osc->waveb[4] = cosf(spread*3.4f);
	osc->waveb[5] = cosf(size*2.4230f);
	osc->waveb[6] = cosf(spread*2.20f);
	osc->waveb[7] = sinf(size * 1.510f + spread*2.6120f);
	int max = osc->speedmul -2;
//	osc->wavea[max] = osc->wavea[0];
	//osc->waveb[max] = osc->wavea[0];
//	osc->wavea[max+1] = osc->wavea[0];
//	osc->waveb[max+1] = osc->wavea[0];

	for (int i = 0; i < 8; i++) osc->waveb[i]  -= osc->wavea[i];
}

float WaveBlepOsc_Get(struct  WaveBlep_t *osc)
{
	osc->mMasterPhase += osc->mPhaseIncrement;
	osc->mSlavePhase += osc->mPhaseIncrement2;
	osc->index = (osc->index + 1) & 63;
	while (osc->mMasterPhase >= 1.0)
	{
		osc->mMasterPhase -= 1.0;
		float olddelta = osc->waveb[osc->waveindex];
		osc->mSlavePhase = osc->mMasterPhase * osc->speedmul;
		osc->waveindex = 0;
		float newOutVal = osc->wavea[0];
		float exactCrossTime = 1.0f - ((osc->mPhaseIncrement - osc->mMasterPhase) / osc->mPhaseIncrement);
		float deltaoutval = newOutVal - (osc->OutVal + (exactCrossTime)* osc->mPhaseIncrement2 * olddelta);
	//	osc->OutVal = newOutVal;
//		osc->OutVal = osc->wavea[osc->waveindex] - osc->waveb[osc->waveindex] * (osc->mSlavePhase - osc->mPhaseIncrement2);;
		AddBlep(osc->circularBuffer, osc->index, -deltaoutval, exactCrossTime);
	}



	while (osc->mSlavePhase >= 1.0)
	{
//		float M = (1 - osc->mMasterPhase) / osc->mPhaseIncrement;
	//	if (M > 1)
		{
			osc->mSlavePhase -= 1.0;
			float olddelta = osc->waveb[osc->waveindex];
			osc->waveindex = (osc->waveindex + 1) & 7;
			float newOutVal = osc->wavea[osc->waveindex];
			float exactCrossTime = 1.0f - ((osc->mPhaseIncrement2 - osc->mSlavePhase) / osc->mPhaseIncrement2);
			float deltaoutval = newOutVal - (osc->OutVal + (exactCrossTime) * osc->mPhaseIncrement2 * olddelta);
			//osc->OutVal = osc->wavea[osc->waveindex] - osc->waveb[osc->waveindex] * (osc->mSlavePhase - osc->mPhaseIncrement2);;

			AddBlep(osc->circularBuffer, osc->index, -deltaoutval, exactCrossTime);
		}
	}
	osc->PrevOut = osc->OutVal;
	osc->OutVal = osc->wavea[osc->waveindex] + osc->waveb[osc->waveindex] * osc->mSlavePhase;
	osc->circularBuffer[osc->index] += osc->OutVal;
	float output = osc->circularBuffer[osc->index];
	osc->circularBuffer[osc->index] = 0.0f;
	return output ;
}

void VosimOsc_Init(struct VosimBlep_t *osc)
{
	osc->index = 0;
	osc->mPhase = 0;
	osc->mPhase2 = 0;
	osc->Sign = -1000;
	osc->VosimStep = 10;
	osc->mPhaseIncrement = 0.1f;
	for (int i = 0; i < 64; i++)
	{
		osc->circularBuffer[i] = 0;
	}
}
void VosimOsc_Update(struct VosimBlep_t *osc, float odsr, float centerfreq, float size, float spread)
{
	float C = centerfreq *odsr;
	osc->mPhaseIncrement = C;
	osc->mPhaseIncrement2 = ((400 + 18000 * size) *odsr)*6.283f;
}
float VosimOsc_GetO(struct  VosimBlep_t *osc)
{
	osc->mPhase += osc->mPhaseIncrement;
	osc->index = (osc->index + 1)  & 63 ;

	while (osc->mPhase >= 1.0)
	{
		osc->mPhase -= 1.0;
		float exactCrossTime = 1.0f - ((osc->mPhaseIncrement - osc->mPhase) / osc->mPhaseIncrement);
		int NewVosim = osc->VosimStep - (32768 / 16);
		if (NewVosim <= 0) NewVosim = 32768;
		if (osc->Sign>0)
		{
			osc->Sign = -1;

			float	step = NewVosim + osc->VosimStep;
			AddBlep(osc->circularBuffer, osc->index, step, exactCrossTime);
			osc->OutVal = -(float)NewVosim;
		}
		else
		{
			float	step =(float)NewVosim + osc->VosimStep;

			AddBlep(osc->circularBuffer, osc->index, -step, exactCrossTime);
			osc->Sign = 1;
			osc->OutVal = (float)NewVosim;
		}

		osc->VosimStep = NewVosim;


	}

	osc->circularBuffer[osc->index] += osc->OutVal;
	float output = osc->circularBuffer[osc->index];
	osc->circularBuffer[osc->index] = 0.0f;

	return output;
}
float VosimOsc_Get(struct  VosimBlep_t *osc)
{
	osc->mPhase += osc->mPhaseIncrement;
	osc->mPhase2 += osc->mPhaseIncrement2;
	osc->index = (osc->index + 1) & 63;
	while (osc->mPhase2 >= 3.1415f * 2.0f)
	{
		osc->mPhase2 -= 3.1415f*2.0f;
	}

	while (osc->mPhase >= 1.0f)
	{
		osc->mPhase -= 1.0f;
		float exactCrossTime = 1.0f - ((osc->mPhaseIncrement - osc->mPhase) / osc->mPhaseIncrement);
		AddBlep(osc->circularBuffer, osc->index, 1, exactCrossTime);
	}

	osc->circularBuffer[osc->index] += (osc->mPhase - osc->mPhaseIncrement);
	float output = osc->circularBuffer[osc->index];
	osc->circularBuffer[osc->index] = 0.0f;
	return -output * sinf(osc->mPhase2);
}

void HyperOsc_Init(struct HyperOsc_t *osc)
{
 	osc->index = 0;
	for (int i = 0; i < MAXHYPER; i++)
	{
  		osc->mPhase[i] = 0;
		osc->mPhaseIncrement[i] = 1;
	}
	for (int i = 0; i < 64; i++)
	{
		osc->circularBuffer[i] = 0;
	}
}

inline void HyperOsc_Update(struct HyperOsc_t *osc, float odsr, float centerfreq, float size, float spread)
{
	float C = centerfreq * odsr;

	HyperCalculate_Spread(&osc->HyperSet, spread, size);

	for (int i = 0; i < osc->HyperSet.Active; i++)
	{
 		float F = (C * osc->HyperSet.Freq[i]);
		uint32_t C2 = (unsigned long)((65536.f*65536.f) * (F));
		osc->mPhaseIncrement[i] = C2;
	}
}

inline int32_t HyperOsc_Get(struct HyperOsc_t *osc)
{
	osc->index = (osc->index + 1) & 63;
	for (int o = 0; o < osc->HyperSet.Active; o++)
	{

		osc->mPhase[o] += osc->mPhaseIncrement[o];
		
		if (~osc->mLastPhase[o] < osc->mPhaseIncrement[o])
		{
			uint32_t crosstime = osc->mPhaseIncrement[o] - osc->mPhase[o];
			crosstime /= osc->mPhaseIncrement[o] >> 16;
			crosstime = ~(crosstime << 16);
			AddBlepFixed(osc->circularBuffer, osc->index , osc->HyperSet.iLevel[o], crosstime);
		}
		uint32_t saw = (osc->mPhase[o]);// - osc->mPhaseIncrement[o]);
		saw >>= 16;
		int32_t si = (int32_t)saw;
		si -= 32768;
		si *= osc->HyperSet.iLevel[o];
		si >>= 16;
		osc->circularBuffer[osc->index] += si;
		osc->mLastPhase[o] = osc->mPhase[o];
	
	}

	int32_t output = osc->circularBuffer[osc->index];
	osc->circularBuffer[osc->index] = 0;
	return output;
}

void HyperPulse_Init(struct HyperPulse_t *osc)
{
	osc->index = 0;

	for (int i = 0; i < MAXHYPER; i++)
	{
		osc->Sign[i] = -1;
		osc->mPhase[i] = 0;
		osc->mPhaseIncrement[i] = 0.1f;
	}
	for (int i = 0; i < 64; i++)
	{
		osc->circularBuffer[i] = 0;
	}
}
void HyperPulse_Update(struct HyperPulse_t  *osc, float odsr, float centerfreq, float size, float spread)
{
	float C = (centerfreq * 2) * odsr;
	HyperCalculate_Spread(&osc->HyperSet, spread, size);


	for (int i = 0; i < osc->HyperSet.Active; i++)
	{
		osc->mPhaseIncrement[i] = C * osc->HyperSet.Freq[i];;
	}
}
inline  float HyperPulse_Get(struct HyperPulse_t *osc)
{
	osc->index = (osc->index + 1) & 63;
	for (int o = 0; o < osc->HyperSet.Active; o++)
	{
		osc->mPhase[o] += osc->mPhaseIncrement[o];
		if (osc->mPhase[o] >= 1.0f)
		{
			osc->mPhase[o] -= 1.0f;
			float exactCrossTime = 1.0f - ((osc->mPhaseIncrement[o] - osc->mPhase[o]) / osc->mPhaseIncrement[o]);
			if (osc->Sign[o]>0)
			{
				AddBlep(osc->circularBuffer, osc->index, 2 * osc->HyperSet.Level[o], exactCrossTime);
				osc->Sign[o] = -1;
			}
			else
			{
				AddBlep(osc->circularBuffer, osc->index, -2 * osc->HyperSet.Level[o], exactCrossTime);
				osc->Sign[o] = 1;
			}
		}

		osc->circularBuffer[osc->index] += osc->Sign[o] * osc->HyperSet.Level[o];
	}

	float output = osc->circularBuffer[osc->index];
	osc->circularBuffer[osc->index] = 0.0f;
	return output;
}


void MinBlepOsc_Init(struct MinBlepOsc_t *osc)
{
	osc->index = 0;
	osc->mPhase = 0;
	osc->mLastPhase = 0;
	osc->Sign = -1;
	osc->mPhaseIncrement = 1;
	for (int i = 0; i < 64; i++)
	{
		osc->circularBuffer[i] = 0;
	}
}
MEMATTR void MinBlepOsc_Update(struct MinBlepOsc_t *osc, float odsr, float centerfreq, float size, float spread)
{
	uint32_t C = (unsigned long)((65536.f*65536.f) * (centerfreq * odsr));
	osc->mPhaseIncrement = C;
}
MEMATTR int32_t MinBlepOsc_Get(struct  MinBlepOsc_t *osc)
{
	osc->mPhase += osc->mPhaseIncrement;	
	osc->index = (osc->index + 1) & 63;
	if (~osc->mLastPhase < osc->mPhaseIncrement)
	{		
		uint32_t crosstime = osc->mPhaseIncrement - osc->mPhase;
		crosstime /= osc->mPhaseIncrement >> 16;
		crosstime = ~(crosstime<<16);
		AddBlepFixed(osc->circularBuffer, osc->index, 0x2000, crosstime);
	}

	uint32_t saw = (osc->mPhase);// - osc->mPhaseIncrement[o]);
	saw >>= 16;
	int32_t si = (int32_t)saw;
	si -= 32768;
	si *= 0x2000;
	si >>= 16;



	osc->circularBuffer[osc->index] += si;
	int32_t output = osc->circularBuffer[osc->index];
	osc->circularBuffer[osc->index] = 0;
	osc->mLastPhase = osc->mPhase;
	return output ;
}

int32_t MinBlepOsc_GetPulse(struct  MinBlepOsc_t *osc)
{
	
	osc->mPhase += osc->mPhaseIncrement;
	osc->index = (osc->index + 1) & 63;

	if (osc->mLastPhase > osc->mPhase)
	{
		
		uint32_t crosstime = osc->mPhaseIncrement - osc->mPhase;
		crosstime /= (osc->mPhaseIncrement >> 16);
		crosstime = ~(crosstime << 16);

		if (osc->Sign>0)
		{
		
			//		crosstime <<= 16;
			AddBlepFixed(osc->circularBuffer, osc->index, 0x2000, crosstime);						
			osc->Sign = -(0x1000);
		}
		else
		{
			AddBlepFixed(osc->circularBuffer, osc->index, -(0x2000), crosstime);
//			AddBlepFixed(osc->circularBuffer, osc->index, -2, uint32_t(exactCrossTime*65536.0*65536.0));
			osc->Sign = 0x1000;
		}


	}

	osc->circularBuffer[osc->index] += osc->Sign;
	int32_t output = osc->circularBuffer[osc->index];
	osc->circularBuffer[osc->index] = 0;
	osc->mLastPhase = osc->mPhase;
	return output;
}


