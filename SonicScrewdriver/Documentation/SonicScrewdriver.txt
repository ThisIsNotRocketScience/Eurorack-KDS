=============================================================================
List of generated methods in project: SonicScrewdriver

This text description is generated by Processor Expert. Do not modify it.
=============================================================================

Module "SM1"       (component SPIMaster_LDD)
   - SM1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc.   If the "Enable in init. code" is set to "yes" value 
                then the device is also enabled(see the description of the Enable() method). In this case the Enable() method 
                is not necessary and needn't to be generated.    This method can be called only once. Before the second call of 
                Init() the Deinit() must be called first.
   - SM1_SendBlock -Sends a block of characters. The method returns ERR_BUSY when the previous block transmission is not 
                completed. The method <CancelBlockTransmission> can be used to cancel a transmit operation. This method 
                finishes immediately after calling it - it doesn't wait the end of data transmission. Use event <OnBlockSent> 
                to check the end of data transmission or method GetSentDataNum to check the state of sending.
   - SM1_ReceiveBlock -This method specifies the number of data to receive. The method returns ERR_BUSY until the specified 
                number of characters is received. The method <CancelBlockReception> can be used to cancel a running receive 
                operation. If a receive operation is not in progress (the method was not called or a previous operation has 
                already finished) all received characters will be lost without any notification. To prevent the loss of data 
                call the method immediately after the last receive operation has finished (e.g. from the <OnBlockReceived> 
                event). This method finishes immediately after calling it - it doesn't wait the end of data reception. Use 
                event <OnBlockReceived> to check the end of data reception or method GetReceivedDataNum to check the state of 
                receiving.
   - SM1_GetBlockSentStatus -This method returns whether the transmitter is finished transmitting all data block. The status 
                flag is accumulated, after calling this method the status is returned and cleared (set to "false" state). This 
                method is available only if method SendBlock is enabled.

Module "TI1"       (component TimerInt)

Module "TU1"       (component TimerUnit_LDD)
   - TU1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.

Module "LED2"      (component BitIO_LDD)
   - LED2_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the "Enable in init. code" is set to "yes" value 
                then the device is also enabled(see the description of the Enable() method). In this case the Enable() method 
                is not necessary and needn't to be generated.
   - LED2_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is read and returned (see <Safe mode> 
                property for limitations). This method cannot be disabled if direction is [input].
   - LED2_PutVal -The specified output value is set. If the direction is <b>input</b>, the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                <tt>SetDir(TRUE)</tt>; see <a href="BitIOProperties.html#SafeMode">Safe mode</a> property for limitations). If 
                the direction is <b>output</b>, it writes the value to the pin. (Method is available only if the direction = 
                <u><tt>output</tt></u> or <u><tt>input/output</tt></u>).
   - LED2_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.
   - LED2_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if the 
                direction = _[output]_ or _[input/output]_.

Module "LED1"      (component BitIO_LDD)
   - LED1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the "Enable in init. code" is set to "yes" value 
                then the device is also enabled(see the description of the Enable() method). In this case the Enable() method 
                is not necessary and needn't to be generated.
   - LED1_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is read and returned (see <Safe mode> 
                property for limitations). This method cannot be disabled if direction is [input].
   - LED1_PutVal -The specified output value is set. If the direction is <b>input</b>, the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                <tt>SetDir(TRUE)</tt>; see <a href="BitIOProperties.html#SafeMode">Safe mode</a> property for limitations). If 
                the direction is <b>output</b>, it writes the value to the pin. (Method is available only if the direction = 
                <u><tt>output</tt></u> or <u><tt>input/output</tt></u>).
   - LED1_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.
   - LED1_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if the 
                direction = _[output]_ or _[input/output]_.

Module "LED3"      (component BitIO_LDD)
   - LED3_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the "Enable in init. code" is set to "yes" value 
                then the device is also enabled(see the description of the Enable() method). In this case the Enable() method 
                is not necessary and needn't to be generated.
   - LED3_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is read and returned (see <Safe mode> 
                property for limitations). This method cannot be disabled if direction is [input].
   - LED3_PutVal -The specified output value is set. If the direction is <b>input</b>, the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                <tt>SetDir(TRUE)</tt>; see <a href="BitIOProperties.html#SafeMode">Safe mode</a> property for limitations). If 
                the direction is <b>output</b>, it writes the value to the pin. (Method is available only if the direction = 
                <u><tt>output</tt></u> or <u><tt>input/output</tt></u>).
   - LED3_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.
   - LED3_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if the 
                direction = _[output]_ or _[input/output]_.

Module "LED4"      (component BitIO_LDD)
   - LED4_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the "Enable in init. code" is set to "yes" value 
                then the device is also enabled(see the description of the Enable() method). In this case the Enable() method 
                is not necessary and needn't to be generated.
   - LED4_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is read and returned (see <Safe mode> 
                property for limitations). This method cannot be disabled if direction is [input].
   - LED4_PutVal -The specified output value is set. If the direction is <b>input</b>, the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                <tt>SetDir(TRUE)</tt>; see <a href="BitIOProperties.html#SafeMode">Safe mode</a> property for limitations). If 
                the direction is <b>output</b>, it writes the value to the pin. (Method is available only if the direction = 
                <u><tt>output</tt></u> or <u><tt>input/output</tt></u>).
   - LED4_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.
   - LED4_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if the 
                direction = _[output]_ or _[input/output]_.

Module "SW2LED"    (component BitIO_LDD)
   - SW2LED_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the "Enable in init. code" is set to "yes" value 
                then the device is also enabled(see the description of the Enable() method). In this case the Enable() method 
                is not necessary and needn't to be generated.
   - SW2LED_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is read and returned (see <Safe mode> 
                property for limitations). This method cannot be disabled if direction is [input].
   - SW2LED_PutVal -The specified output value is set. If the direction is <b>input</b>, the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                <tt>SetDir(TRUE)</tt>; see <a href="BitIOProperties.html#SafeMode">Safe mode</a> property for limitations). If 
                the direction is <b>output</b>, it writes the value to the pin. (Method is available only if the direction = 
                <u><tt>output</tt></u> or <u><tt>input/output</tt></u>).
   - SW2LED_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - SW2LED_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if 
                the direction = _[output]_ or _[input/output]_.

Module "AD1"       (component ADC)
   - AD1_Measure -This method performs one measurement on all channels that are set in the component inspector. (Note: If the 
                <number of conversions> is more than one the conversion of A/D channels is performed specified number of times.)
   - AD1_MeasureChan -This method performs measurement on one channel. (Note: If the <number of conversions> is more than one 
                the conversion of the A/D channel is performed specified number of times.)
   - AD1_GetChanValue -Returns the last measured value of the required channel. Format and width of the value is a native 
                format of the A/D converter.
   - AD1_GetValue16 -This method returns the last measured values of all channels. Compared with <GetValue> method this method 
                returns more accurate result if the <number of conversions> is greater than 1 and <AD resolution> is less than 
                16 bits. In addition, the user code dependency on <AD resolution> is eliminated.
   - AD1_GetChanValue16 -This method returns the last measured value of the required channel. Compared with <GetChanValue> 
                method this method returns more accurate result if the <number of conversions> is greater than 1 and <AD 
                resolution> is less than 16 bits. In addition, the user code dependency on <AD resolution> is eliminated.
   - AD1_Calibrate -This method starts self calibration process. Calibration is typically used to remove the effects of the 
                gain and offset from a specific reading.

Module "PTA"       (component Init_GPIO_VAR0)
   - PTA_Init -This method initializes registers of the GPIO module according to the Peripheral Initialization settings. Call 
                this method in user code to initialize the module. By default, the method is called by PE automatically; see 
                "Call Init method" property of the component for more details.

Module "DACSEL"    (component BitIO_LDD)
   - DACSEL_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the "Enable in init. code" is set to "yes" value 
                then the device is also enabled(see the description of the Enable() method). In this case the Enable() method 
                is not necessary and needn't to be generated.
   - DACSEL_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is read and returned (see <Safe mode> 
                property for limitations). This method cannot be disabled if direction is [input].
   - DACSEL_PutVal -The specified output value is set. If the direction is <b>input</b>, the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                <tt>SetDir(TRUE)</tt>; see <a href="BitIOProperties.html#SafeMode">Safe mode</a> property for limitations). If 
                the direction is <b>output</b>, it writes the value to the pin. (Method is available only if the direction = 
                <u><tt>output</tt></u> or <u><tt>input/output</tt></u>).
   - DACSEL_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - DACSEL_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if 
                the direction = _[output]_ or _[input/output]_.

Module "GATE"      (component BitIO_LDD)
   - GATE_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the "Enable in init. code" is set to "yes" value 
                then the device is also enabled(see the description of the Enable() method). In this case the Enable() method 
                is not necessary and needn't to be generated.
   - GATE_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is read and returned (see <Safe mode> 
                property for limitations). This method cannot be disabled if direction is [input].

Module "EInt1"     (component ExtInt_LDD)
   - EInt1_Init -This method initializes the associated peripheral(s) and the component internal variables. The method is 
                called automatically as a part of the application initialization code.

Module "Cpu"       (component MKL02Z32FM4)

===================================================================================
